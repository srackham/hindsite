# Hindsite Reference

## Overview
hindsite is a static website generator. It's easy to learn an use and very fast.
hindsite builds static websites with optional document and tag indexes (e.g. blogs
posts, newsletters, articles) from Markdown source documents.

The overarching goal is a minimal cognitive footprint that is easy to
understand. This is archived by generalizing and keeping the number of features
and concepts to a minimum, in particular:

- Structural transparency -- content, template and build directory trees
  mirror each other.
- One template language (native Go templates) for both templates and content.
- Unified front matter, configuration parameters and user defined template
  variables can be applied to Markdown documents and static files.
- Use of TOML or YAML markup for configuration and front matter.
- Themes are not separate, every project template directory is a theme.
- The directory hierarchy establishes the index hierarchy and the configuration
  and template file precedence.
- hindsite is lightweight (less than 2,000 lines of executable code).


## Quick Start
1. Download the Hindsite executable for your platform.

2. Create a new Hindsite project directory and install the builtin blog
   template:

    mkdir myproj
    hindsite init myproj -builtin blog

3. Build the website:

    hindsite build myproj

4. Start the hindsite web server:

    hindsite serve myproj

5. Open your Web browser at http://localhost:1212

The best way to start learning hindsite is to browse the blog [project
directory](#projects).

Try editing content documents and templates and rebuilding. If you are familar
with Jekyll or Hugo you'll be right a home (hindsite can read Jekyll and Hugo
Markdown document front matter).


## Projects
A hindsite project consists of three separate directories:

- A _content directory_ containing [Markdown documents](#documents) and
  [static resource files](#static-files).
- A _template directory_ containing [HTML templates](#templates) and project
  [configuration files](#configuration-files).
- A _build directory_ containing the generated website.

By default these directories reside in the project directory and are named
`content`, `template` and `build`. For example, here's the builtin blog project
structure:

```
├── build
│   ├── indexes
│   │   ├── newsletters
│   │   └── posts
│   │       └── tags
│   ├── newsletters
│   │   └── images
│   └── posts
│       └── images
├── content
│   ├── newsletters
│   │   └── images
│   └── posts
│       └── images
└── template
    ├── init
    │   ├── newsletters
    │   │   └── images
    │   └── posts
    │       └── images
    ├── newsletters
    └── posts
```

Notice that, if we disregard the `build/indexes` and `template/init`
directories, all three directories share the same base directory structure.
Specifically, all three contain the template directory structure and the build
directory is a one-to-one reconstruction of the content directory.

The `build/indexes` directory contains the generated document and tag index
pages; the `template/init` directory is used by the [init
command](#init-command) to initialize new project content directories.


## hindsite CLI
Usage:

    hindsite init  PROJECT_DIR [OPTIONS]
    hindsite build PROJECT_DIR [OPTIONS]
    hindsite serve PROJECT_DIR [OPTIONS]
    hindsite help  [TOPIC]

Commands:

    init    initialize a new project
    build   generate the website
    serve   start development webserver
    help    display documentation

Common command options:

`PROJECT_DIR`:: the hindsite project directory.
`-content CONTENT_DIR`:: the project content directory (defaults to `PROJECT_DIR/content`).
`-build BUILD_DIR`:: the project build directory (defaults to `PROJECT_DIR/build`).
`-template TEMPLATE_DIR`:: the project template directory (defaults to `PROJECT_DIR/template`).
`-v`:: Increase verbosity. `-vv` is an alias for `-v -v`.

## help command
Usage:

    hindsite help

Synopsis:

    Prints command usage and documentation.

- `hindsite`, `hindsite -h` and `hindsite --help` are all aliases for `hindsite help`.


## init command
Usage:

    hindsite init  PROJECT_DIR [OPTIONS]

Synopsis:

    Initializes a project content directory from a project template.

Applicable options:

    -content CONTENT_DIR
    -template TEMPLATE_DIR
    -builtin NAME
    -v

- `NAME` is a builtin template name viz. `blog` or `minimal`.
- The `CONTENT_DIR` must be empty.
- If the `-builtin` option is specified the `TEMPLATE_DIR` must also be empty.

Execution:

1. If the `-builtin` option is specified then build copies the builtin template
   to `TEMPLATE_DIR`.
2. It then recreates the template directory structure in the content directory
   (skipping the `TEMPLATE_DIR/init` directory).
3. If the `TEMPLATE_DIR/init` directory exists then its entire contents is
   copied to the content directory. The optional `init` directory contains
   static resources and example documents -- it really is just a content
   directory.

The following example installs the builtin `blog` template to `./template` then
copies the contents of the `./template/init` directory to the `./content`
directory:

    hindsite init . -builtin blog


## build command
Usage:

    hindsite build PROJECT_DIR [OPTIONS]

Synopsis:

    Build a static website.

Applicable options:

    -content CONTENT_DIR
    -template TEMPLATE_DIR
    -build BUILD_DIR
    -incremental
    -drafts
    -v

- If the `-incremental` option is specified only new and updated files are
  rebuilt (by default the entire contents of the build directory is deleted and
  the site is completely rebuilt).
- Specify `-drafts` to include draft documents.
- Project, build and template directories cannot overlap, with one exception:
  the content directory can be set to `TEMPLATE_DIR/init`. This is handy for
  testing template initialization content.

Note that projects are not restricted to a single content, template and build
directory. The `-content`, `-template` and `-build` options allow separate
builds from differing combinations of content and template directories.

Execution:

1. All configuration files in the template directories are parsed.
2. All templates from templates directories are parsed.
3. The content directories are scanned and:
   * Markdown document front matter is parsed.
   * Static files are processed and copied to the corresponding build
     directories.
4. Document indexes are built.
5. Markdown document bodies are rendered with their corresponding layout
   templates.
6. Copy homepage file if specified.


### Build summary
_documents_:: The total number of Markdown documents (including drafts).

_static_:: The total number of static files.

_drafts_:: The number of skipped draft documents. If the `-drafts` option is
specified this will be zero.

_time_:: The execution time in seconds.

The build summary does not include [excluded files](TODO).


### Incremental builds
An incremental build only rebuilds those documents and indexes that require
updating. Incremental builds are faster and they facilitate incremental
deployment. The incremental rebuild rules are:

1. Rebuild everything if a configuration file or a template file has changed.
2. Rebuild indexes that contain one or more new or modified documents since the
   index was last built.
3. Rebuild documents if they have been modified since they were last built.

These rules are a compromise between performance and build integrity. If you are
just adding and editing files (documents, templates, configuration and static
files) incremental build integrity is assured, but there a few anomalies to be
aware of:

1. Files in the build directory that are no longer used will not be
   automatically deleted.
2. If an indexed document is deleted from the content directory it will remain
   in the generated indexes until the dependent indexes are next rebuilt.
3. Any changes that influence document generation and not monitored by the
   incremental build rules will not trigger an incremental rebuild.

### Continuous builds
Hindsite does not have a builtin file watcher, but this is easily implemented
with a file watcher script, see the [FAQ](faq.html#auto-rebuild) for details.


## serve command
Usage:

    hindsite build PROJECT_DIR [OPTIONS]

Synopsis:

    Starts a development webserver on the project build directory.

Applicable options:

    -build BUILD_DIR
    -port PORT
    -v

- `PORT` is the server port number (defaults to 1212).


## Configuration files and parameters 
Configuration files contain parameters that drive website generation. They
reside in the template directories and are optional, though most projects will
have at least one at the root of the template directory. Configuration files are
encoded in either TOML or YAML markup and are named `config.toml` and
`config.yaml` respectively.

The configuration applied to each document or index is computed by merging the
configuration files that lie on the corresponding template directory path.
Configuration files closer to the document or index base directory have higher
precedence than those further up the directory path.

The `exclude`, `homepage` and `urlprefix` configuration parameters are site-wide
and are always taken from the template directory root configuration i.e. they
are not subject to subdirectory configuration file parameter merging.

Configuration parameters:

**author**: Specified the default document author. TOML example:

    author = "Joe Bloggs"

**exclude**: A `|` separated list of paths in the content directory that are
excluded from `build` command processing. The paths are relative to the content
directory and conform to patterns matched by the Go [filepath.Match()
function](https://golang.org/pkg/path/filepath/#Match). Note that the `*`
wildcard character _does not_ match path separators e.g. `*.out` matches all
`.out` files in the content root, not subdirectories. TOML example:

    exclude = "config.rmu|sass"

**shortdate**, **mediumdate**, **longdate**: These are date formats for template
`shortdate`, `mediumdate` and `longdate` variables respectively (the `date`
variable is an alias for `mediumdate`). The values conform to the layouts
supported by Go [time.Format
function](https://golang.org/pkg/time/#Time.Format). The default values are:

    shortdate = "2006-01-02",
    mediumdate = "2-Jan-2006",
    longdate = "Mon Jan 2, 2006",

**homepage**: The `homepage` parameter is the name of a file, relative to the
build directory, that is copied by the `build` command to the root of the build
directory and named `index.html`. TOML example:

    homepage = "indexes/posts/docs-1.html"

**paginate**: This parameter sets the number of documnts per document index
page. The default value is 5. Set to -1 to include all documents on a single
document index page. TOML example:

    paginate = 10

**timezone**: Sets the time zone for site generation. Set to a TZ name from IANA
Timezone Database or to `Local` (the system's local timezone). Defaults to
`Local`. TOML example:

    timezone = "Pacific/Auckland"

**urlprefix**: This parameter is prepended to all synthesised document and index
page URLs. Its default value is a blank string. TOML examples:

    urlprefix = "/blog"
    urlprefix = "https://www.example.com"

## Documents
Document pages are built by rendering content Markdown files with HTML
templates. The generated HTML file is saved to the corresponding build location.

### Front matter
## Static files
## Indexes
## Templates
## Template variables
## Content variables
## URLs
Hindsite synthesizes root-relative document and index page URLs. URLs are
relative to the build directory and are prefixed with the `urlprefix`
configuration parameter.

For example, if the build directory is `/myproj/build` and the rendered
document is `/myproj/build/posts/post1.html` then the document URL will
be `/posts/post1.html`. If the `urlprefix` is `/blog` then the URL will be
`/blog/posts/post1.html`.

TODO

Hindsite synthesizes document URLs for index page links. By default synthesized
URLs are root-relative to the content directory. For example:

    Content directory: /tmp/project/content
    Content document:  /tmp/project/content/posts/post1.md
    Synthesised URL:   /posts/post1.html

This works fine if you deploy the build to the root of your website. For example
if your website address is `http://example.com` then the synthesised
root-relative `/posts/post1.html` URL is equivalent to
`http://example.com/posts/post1.html`.

If you are deploying to a server subdirectory then you need to set the
`urlprefix` configuration variable to ensure synthesized URLs are rooted
correctly. For example, if are deploying to the server `http://example.com/blog`
directory you need to set `urlprefix` to `/blog`. The synthesized URL from the
previous example now becomes `/blog/posts/post1.html` (equivalent to
`http://example.com/blog/posts/post1.html`).

To synthesize absolute URLs include the URL domain in `urlprefix`. Using the
previous example, setting `urlprefix` to `http://example.com/blog` will
synthesize the absolute URL `http://example.com/blog/posts/post1.html`.

Use relative URLs for authored links between document pages -- it's less verbose
and side-steps root-relative URL issues. For example `./post2.html` links to a
document in the same directory.

See [HTML File Paths](https://www.w3schools.com/html/html_filepaths.asp).

If you want to hide URL file name extensions you will need to configure your
server, see [How to remove file extension from website
address?](https://stackoverflow.com/questions/6534904/how-to-remove-file-extension-from-website-address).







## Hello hindsite
The simplest project:

```
content/
    index.md
template/
    layout.html
build/
```
Build command: `hindsite build`

`index.md` file:
```
Hello *World*!
```

`layout.html` file:

```
<!doctype html>
<head><title>{{.title}}</title></head>
<body>{{`{{.body}}`}}</body>
```

## Templates
TODO
- Templates don't have to be one per file, you can define multiple in a single file.
- Layout templates can be specified in the front matter and can be any defined template.
- All templates are aggregated, see https://stackoverflow.com/questions/17206467/go-how-to-render-multiple-templates-in-golang

> Layouts are fixed patterns in web page design that can be re-used for multiple pages. Web applications often use layouts, as pages in a web application need to look the same for a consistent user interface. -- https://www.htmlgoodies.com/beyond/reference/nesting-templates-with-go-web-programming.html


### Template variables
Template variables are injected into template files during webpage generation.
There are template variables for document front matter, index generation,
configuration parameters and miscellaneous items such as the current date and
time.

Inside a template, variable names are prefixed with a dot and enclosed by double
curly braces. For example the document `title` variable appears in the template
as`{{.title}}`. See the Go [html/template
package](https://golang.org/pkg/html/template/) more about the use of templates.

Template variable names are:

- Lower case alpha-numeric starting with an alpha character.
- Case sensitive.


## Validation and testing
Here are a few of the many available tools.

### Local web server
In lieu of a built-in `serve` command (not yet implemented).

Run:

   python -m SimpleHTTPServer

Then open you web browser at http://localhost:8000/

I have the `ws` alias for this command.

### Link validation
Use the NPM [broken-link-checker](https://www.npmjs.com/package/broken-link-checker).

  blc -r -e http://localhost:8000/      # Recursively check all local links.
  blc -r http://localhost:8000/         # Recursively check all links.

### HTML validation
Use the NPM [html-validator-cli](https://www.npmjs.com/package/html-validator-cli).

```
  # Single document
  html-validator --verbose --format=text --file=doc.html
  # All .html docs recursively.
  for f in $(find . -name '*.html'); do
    echo $f
    html-validator --verbose --format=text --file=$f
  done
```

I added the `html-validator-all` alias to recursively validate all HTML files in current directory.

```
alias html-validator-all='for f in $(find . -name "*.html"); do echo $f; html-validator --verbose --format=text --file=$f; done'
```


## Coding
- Use the Go [html package](https://godoc.org/golang.org/x/net/html) to parse HTML.


## Vocabulary
**project**: A hindsite [project](#projects) consists of a _content directory_,
a _template directory_ and a _build directory_. Hindsite uses the contents of
the template and content directories to generate a website which it writes to
the build directory.

**content directory**: A directory (default name `content`) containing content
documents along with optional configuration files and optioinal static website
files (e.g. images, CSS).

**template directory**: A directory (default name `template`) containing webpage
templates plus optional configuration files and static website files. The
template directory is a blueprint, it contains everything needed to build a
Website. The template directory structure mirrors that of the content directory.

**build directory**: A directory (default name `build`) into which the generated
Website is written.

**content document**: A readable-text markup file (`.{md,rmu}`) used to generate
a corresponding HTML web page.

**configuration file**: Optional TOML or YAML files `config.{toml,yaml}`
containing configuration parameters located in the content and template
directories.

**template file**: A Go HTML template file (`.html`). Templates reside in the
template directory. A template file contains one or more named templates.
Templates are combined with document content and meta-data to generate HTML
document and index pages.

**document templates**: Each content document has a template named `layout.html`
in the corresponding template directory. If there is no `layout.html` in the
corresponding template directory then the parent template directories are
searched right up to the templates root directory.

**index templates**: Index templates (`{docs,tags}.html`) are used to render
document index and tag index web pages.

**index**: A generated HTML Webpage containing a list of content documents.

**primary index**: An index that is not nested. A document can only belong to
one primary index.

**secondary index**: An index that is nested.

**tag**: A keyword or phrase used to categorize a content document.

**tag index**: Indexed document tags can be used to generate a tag index along
with per tag document indexes. It usually makes sense to confine tag indexes to
primary indexes.


**static file**: A [static file](#static-files.html) is a file in the content or
template directories that is not a document or a template or a configuration
file. Static files in the content directory are copied to the built website.
Static file in the template directory are used by the `init` command to
initialise a new content directory.

**front matter**: Meta-data embedded at the start of content documents.


## Implementation
- By convention the content, template and build directories normally reside in
  the same folder, but this convention is not enforced.

- There is a close one-to-one mapping between content, template and build file
  paths. This lightens the congative load especially when it comes to authoring
  cross-page URLs.

Example website with blog and newsletters:

```
content/
    config.toml
    config.rmu
    CNAME
    favicon.ico
    pages/
        index.md
        about.md
    blog/
        example.md
        foobar-image.png
        2008-12-10-post-zero.rmu
    newsletters/
        2018-02-07.md
        2018-02-14.md
    static/
template/
    config.toml
    layout.html
    CNAME
    favicon.ico
    pages/
        layout.html
    blog/
        layout.html
        docs.html
        tags.html
        example.md
    newsletters/
        layout.html
        docs.html
        example.md
    static/
        main.css
        logo.jpg
build/
    favicon.ico
    CNAME
    pages/
        index.html
        about.html
    blog/
        post-one.html
        foobar-image.png
        2008-12-10-post-zero.html
    newsletters/
        2018-02-07.html
        2018-02-14.html
    static/
        main.css
        logo.jpg
    indexes/
        blog/
            all.html
            docs-1.html
            docs-2.html
            tags.html
            tags/
                kotlin.html
        newsletters/
            docs-1.html
```

## Best practices
### File and directory names
Content file and directory names should only contain lower case alpha numeric
and hyphen characters. This is is mandatory and:

* Ensures consistent, readable URLs without ugly encodings for illegal URL
  characters.
* Allows file names to map to reasonable document titles.


## Indexes
- Documents and tag indexes are created by the build command.
- A project can contain any number of indexed content directories.
- Any content directory is indexed when the corresponding template directory
  contains a `docs.html` template.
- Documents from the indexed directory and all subdirectories belong to the index.
- Indexes can be nested. This allows categorized document subdirectories to have
  separate indexes along with aggregated parent directory indexes.
- Generated index pages are written to a directory named `indexes` located at the
  root of the build directory.


TODO

- There are two types of indexes: document indexes and tags indexes.


**indexed document**: A content document residing in an indexed directory. Indexed
documents must have a title and a publication date. Tags are optional.

**indexed directory**: A directory in the content directory that generates a
document index and optional tag indexes. The corresponding template directory
contains a `docs.html` template and optional `tags.html` templates. The
presence of the `docs.html` template flags the directory as indexed.

**indexes directory**: A directory in the build directory containing generated
index pages.

## Document indexes
- The built indexes directory contains a directory for each indexed document directory.
- The indexes directory structure mirrors the templates directory indexes.
- The following HTML index files are built for each index:

  * `docs-1.html`, `docs-2.html`... : a paginated list of the all documents.
  * `tags.html`: a list of document tags linked to files named like
    `tags/SLUGIFIED_TAG_NAME.html` (one per tag) each containing a list of
    related posts. Tags index files are optional and will be generated when a
    `tags.html` template appears in the corresponding template directory.


## Template variables
Template variables are used in templates. They allow context specific content to
be rendered in the output documents. Variables are specific to the document and
index templates.

### Site variables
All templates have access to site variables.

```
.site.urlprefix        root configuration urlprefix
```

### User variables
All templates have access to user defined configuration file variables.

For example, these `config.toml` configuration file entries:

```
[user]
banner = "News & Views"
byline = "Ac eros etiam enim pellentesque proin"

```

Or these `config.yaml` file entries:

```
user:
  banner: News & Views
  byline: Ac eros etiam enim pellentesque proin, tincidunt augue
```

Are available as these template variables:

```
.user.banner
.user.byline

```

User template variables are subject to all the normal configuration file precedence and merging
rules.

### Document template variables
These variables relate to a single document. They are rendered by the
corresponding `layout.html` template.

```
.title
.date                alias for mediumdate
.shortdate
.mediumdate
.longdate
.author
.synopsis            rendered synopsis HTML
.addendum            rendered addendum HTML
.slug
.url
.tags                an iterable list of per-tag .tag and .url variables
.body                rendered content HTML
.next                contains .url of next document (1)
.prev                contains .url of previous document (1)
```
(1) Indexed documents only.

### Document index template variables
These variables relate to the collection of documents belonging to a document
index page. They are rendered by the corresponding `docs.html` template. In
addition to document variables there are variables for the previous, next, first
and last document index page.

```
.docs                an iterable list of documents for the current page
.count               the total number of documents in this index
.tag                 tag name (tag index pages only)
.page.number         current page number
.page.url            current page URL
.page.prev           .number and .url of previous document
.page.next           .number and .url of next document
.page.first          .number and .url of first document
.page.last           .number and .url of last document
```

### Tags index page template variables
These variables relate to the collection of tags belonging to a document
index. Thay are rendered by the corresponding `tags.html` template.

```
.tags     an iterable list, one per tag.

Each item in the tags list contains:

.tag      the tag
.url      URL of of the tag's document index
.count    the number of documents with this tag
```


## Configuration and front matter variables
Additional build information is sourced from configuration files and document front matter.

## Front matter
Document front matter is embedded at the start of content files (c.f.
https://www.npmjs.com/package/marked-metadata,
https://gohugo.io/content-management/front-matter/).

Embedded YAML with `<!--`, `-->` or `---` delimiters e.g.

```
<!--
title:    Foo Bar
synopsis: An brief history of the origins of the foofoo valve.
addendum: This article was updated March, 2018.
date:     2018-02-16
tags:     foo foo valve, qux, baz
slug:     foofoo-valve-history
draft:    true
-->
```
- `tags` are a comma-separated string. Tags can also be encoded as a YAML list
  or a TOML array called `categories` c.f. Hugo.
- The variable name `description` is an alias for `synopsis`.
- The HTML comment delimiters are preferable because:
  * They ignored if the document is rendered by other applications.
  * The front matter is retained by the generated HTML web page.
- [YAML syntax](https://learn.getgrav.org/advanced/yaml).
- See [go-yaml](https://github.com/go-yaml/yaml) package.

Embedded TOML (c.f. Hugo front matter):

```
+++
title = "Foo Bar"
description = "An brief history of the origins of the foofoo valve."
date = "2018-02-16"
categories = [
  "foo foo valve",
  "qux",
  "baz"
]
slug = "foofoo-valve-history"
draft = "true"
+++
```
See:

- [TOML](https://github.com/toml-lang/toml#user-content-inline-table).
- Go TOML parser https://github.com/BurntSushi/toml

Implicit values (if the document does not contain a front matter header):

- `date` is extracted from the file name `YYYY-MM-DD-` date prefix.
- `title` defaults the document file name with date prefix removed,
  hyphens replaced by spaces and converted to title case.
- `author` defaults to the configuration file value, failing that, blank.
- `synopsis` defaults to the content up to the first `<!--more-->` tag or blank if
  there is no tag. Processed as markup.
- `addendum` (a general purpose content field) defaults to blank. Processed as markup.
- `draft` defaults to false.


## Projects
A hindsite project consists of a _content directory_, a _template
directory_ and a _build directory_. Hindsite uses the contents of the template
and content directories to generate a website which it writes to the build
directory.

Content, template and build directories must be mutually exclusive (not
contained within one another). Typically all three directories are in a single
project directory:

```
content/
    content files...
template/
    template files...
build/
    website files...
```
### Multi-content and Multi-template projects
Content and template directories are not bound exclusively to each other: a
single template process multiple content directories just as a single content
directory can be processed by multiple templates.


## Static files
A static is a file in the content or template directories that is not a
document or a template or a configuration file. Static files (typically CSS and
images) are copied verbatim to the corresponding location in the build directory
by the build command. The content directory is processed after the template
directory.

## Content document markup
Content documents can be written in Markdown or Rimu.

### Rimu markup
The optional `config.rmu` file at the root of content directory will be
prepended to all Rimu files before they are rendered and mostly used to define
macro values.

You can distribute `config.rmu` as a template example file and the `init` command
will install it in the content directory.


## CLI

hindsite help:
```
Hindsite is a static website generator.

Usage:

    hindsite init  PROJECT_DIR [OPTIONS]
    hindsite build PROJECT_DIR [OPTIONS]
    hindsite serve PROJECT_DIR [OPTIONS]
    hindsite help  [TOPIC]

The commands are:

    init    initialize a new project
    build   generate the website
    serve   start development webserver
    help    display documentation

The options are:

    -content  CONTENT_DIR
    -template TEMPLATE_DIR
    -build    BUILD_DIR
    -port     PORT
    -builtin  NAME
    -incremental
    -drafts
    -v

Use "hindsite help [command]" for more information about a command.

Additional help topics:

    project describes a hindsite project
    vocab   the hindsite vocabulary
```

### init command
hindsite help init:
```
Create a new project

Usage:

    hindsite init [options]...




```
- `PROJECT_DIR` defaults to `.`
- `CONTENT_DIR` defaults to `content`
- `BUILD_DIR` defaults to `build`
- `TEMPLATE_DIR` defaults to `template`
- The `-v` (verbose) increases the verbosity. Specify it twice for even more information.

### Init command
Creates new project content directory from an existing template directory.

- If the `-builtin NAME` option is specified the named builtin template will be
  installed in the project templte directory.
- Clones the `TEMPLATE_DIR` directory structure to `CONTENT_DIR`.
- Copies example content documents to `CONTENT_DIR`.
- If the `CONTENT_DIR` contains existing files hindsite will refuse to continue.


### Build command
### Serve command
the _serve_ command opens a development server on the `BUILD_DIR` directory.

- The `-port PORT` option sets the server port (defaults to 1212).
- It handles the `urlprefix` configuration option correctly.


### Dates
#### Input
- Front matter document date is assumed to be in UTC if timezone is not specified.

The RFC 3339 format is recognised. The following relaxations are permitted:

- If the time zone offet is omitted then UTC is assumed.
- If the time is omitted then the time `00:00:00` is used.
- A space character separator (instead of the letter `T`) between the date and the time is allowed.

e.g. with `timezone = "+13:00"`:

    1979-05-27T07:32:00+13:00   # follows the RFC 3339 spec
    1979-05-27T07:32:00         # 1979-05-27T07:32:00+13:00
    1979-05-27 07:32:00         # 1979-05-27T07:32:00+13:00
    1979-05-27                  # 1979-05-27T00:00:00+13:00

#### Output
- Docment template publication date variables: shortdate, mediumdate (alias date), longdate
- If `timezone` config parameter is not specified the local time offset is used.

See:

- https://www.ietf.org/rfc/rfc3339.txt
- https://golang.org/pkg/time/



### Implementation notes
- Internally all directory and file paths are absolute and platform specific (manipulated by the `path/filepath` package).

## Testing
Need to test of example projects and then compare the contents of the
build directory to an `expected` directory for equality.

- This would provide a way to test arbitrarily complex projects.
- But approach is unwieldy for error scenarios.
- The test cases to include ./examples/
- Use these projects for benchmarks.
