---
permalink: /index.html
---

# Hindsite Reference

## Overview
hindsite is a static website generator. It builds static websites with optional
document and tag indexes from Markdown source documents (e.g. blogs posts,
newsletters, articles).

The goal is an intuitive, minimalist application that is easy to use and
understand. The number of features and concepts have been kept to a minimum.

/*
Features:

- Structural transparency -- content, template and build directory trees
  mirror each other.
- One template language (native Go templates) for both templates and content.
- Unified front matter, configuration parameters and user defined template
  variables can be applied to Markdown documents and static files.
- Use of TOML or YAML markup for configuration and front matter.
- The directory hierarchy establishes the index hierarchy and the configuration
  and template file precedence.
- Themes are not separate, every project template directory is a theme.
- hindsite is lightweight (less than 2,000 lines of executable code).
*/


## Quick Start
[Download hindsite](TODO) for your platform and create a fully functional blog and
newsletter website with just two hindsite commands:

1. Create a new Hindsite project directory and install the builtin blog
   template:

    mkdir myproj
    hindsite init myproj -builtin blog

2. Build the website and start the hindsite web server:

    hindsite serve myproj

To view the website in your browser open your Web browser at
http://localhost:1212

The best way to start learning hindsite is to browse the blog [project
directory](#projects).

Try editing content documents and templates and rebuilding. If you are familar
with Jekyll or Hugo you'll be right a home (hindsite can read Jekyll and Hugo
Markdown document front matter).


## hindsite CLI
Usage:

    hindsite init  PROJECT_DIR [OPTIONS]
    hindsite build PROJECT_DIR [OPTIONS]
    hindsite serve PROJECT_DIR [OPTIONS]
    hindsite help

Commands:

    init    initialize a new project
    build   generate the website
    serve   start development webserver
    help    display usage summary

Common command options:

`PROJECT_DIR`:: the hindsite project directory.
`-content CONTENT_DIR`:: the project content directory (defaults to `PROJECT_DIR/content`).
`-build BUILD_DIR`:: the project build directory (defaults to `PROJECT_DIR/build`).
`-template TEMPLATE_DIR`:: the project template directory (defaults to `PROJECT_DIR/template`).
`-v`:: Increase verbosity. `-vv` is an alias for `-v -v`.

## help command
Prints command usage and options summary plus the hindsite version number.

Usage:

    hindsite help

- `hindsite`, `hindsite -h` and `hindsite --help` are all aliases for `hindsite help`.


## init command
Initializes a project content directory from a project template.

Usage:

    hindsite init  PROJECT_DIR [OPTIONS]

Applicable options:

    -content CONTENT_DIR
    -template TEMPLATE_DIR
    -builtin NAME
    -v

- `NAME` is a builtin template name viz. `blog` or `minimal`.
- The `CONTENT_DIR` must be empty.
- If the `-builtin` option is specified the `TEMPLATE_DIR` must also be empty.

Execution:

1. If the `-builtin` option is specified then copy the builtin template to
   `TEMPLATE_DIR`.
2. Recreate the template directory structure in the content directory (skipping
   the `TEMPLATE_DIR/init` directory).
3. If the `TEMPLATE_DIR/init` directory exists its contents is recursively
   copied to the content directory. The optional `init` directory contains
   static resources and example documents -- it really is just a content
   directory.

The following example installs the builtin `blog` template to `./template` then
copies the contents of the `./template/init` directory to the `./content`
directory:

    hindsite init . -builtin blog


## build command
Build a static website.

Usage:

    hindsite build PROJECT_DIR [OPTIONS]

Applicable options:

    -content CONTENT_DIR
    -template TEMPLATE_DIR
    -build BUILD_DIR
    -incremental
    -drafts
    -v

- If the `-incremental` option is specified only new and updated files are
  rebuilt (by default the entire contents of the build directory is deleted and
  the site is completely rebuilt).
- Specify `-drafts` to include draft documents.
- Content, build and template directories cannot overlap, with one exception:
  the content directory can be `TEMPLATE_DIR/init`. This is handy for testing
  template initialization content.

Note that projects are not restricted to a single content, template and build
directory. The `-content`, `-template` and `-build` options allow separate
builds from differing combinations of content and template directories.

Execution:

1. All configuration files in the template directories are parsed.
2. All templates from templates directories are parsed.
3. The content directory is recursively scanned and:
   * Document front matter is parsed.
   * Static files are processed and copied to the corresponding build
     directories.
4. Document indexes are built.
5. Document bodies are rendered with their corresponding layout templates.
6. If the [homepage](#configuration) is specified it is copied to `index.html`.


### Build summary
The printed build summary includes:

_documents_:: The total number of Markdown documents (including skipped drafts).

_static_:: The total number of static files.

_drafts_:: The number of skipped draft documents. If the `-drafts` option is
specified this will be zero.

_time_:: The execution time in seconds.

The build summary does not include files that are excluded by the
[exclude](#configuration) configuration parameter.

/*
OLD: Relates to -incremental option.
### Incremental builds
An incremental build only rebuilds those webpages that require updating.
Incremental builds are faster and they facilitate incremental deployment. The
incremental rebuild rules are:

1. Rebuild everything if a configuration file or a template file has changed.
2. Rebuild indexes that contain one or more new or modified documents since the
   index was last built.
3. Rebuild documents if they have been modified since they were last built.

These rules are a compromise between performance and build integrity. If you are
just adding and editing files (documents, templates, configuration and static
files) incremental build integrity is assured, but there a few anomalies to be
aware of:

1. Files in the build directory that are no longer used will not be
   automatically deleted.
2. If an indexed document is deleted from the content directory it will remain
   in the generated indexes until the dependent indexes are next rebuilt.
3. Any changes that influence document generation and not monitored by the
   incremental build rules will not trigger an incremental rebuild.
*/

## serve command
The _serve_ command rebuilds the project then starts a development webserver on
the project _build_ directory. The _serve_ command automatically
[rebuilds](#incremental-rebuilds) affected webpages if any files in the
_content_ or _template directories_ are added, modified or removed. The server
also handles browser live reloading.

Usage:

    hindsite build PROJECT_DIR [OPTIONS]

Applicable options:

    -build BUILD_DIR
    -port PORT
    -v

- `PORT` is the server port number (defaults to 1212).
- Press the _R_ key followed by the _Enter_ key to force a clean rebuild.

### Incremental rebuilds
The [serve command](#serve-command) automatically performs partial builds in
order to speed up live reloading and make the content creation process easier
and more responsive.

The amount of processing required will depend on the size of your site and the
type of change. Most content updates are very fast but processing times increase
if:

- Indexed documents are added or deleted (necessitating full index rebuild).
- A configuration file or template file is added, changed or removed
  (necessitating a full site rebuild).

To ensure build integrity you should always perform a clean build before
deployment and after project structural changes (the serve command does not
process changes to the project directory structure).


## Projects
A hindsite project consists of three separate directories:

- A _content directory_ containing [Markdown documents](#documents) and
  [static resource files](#static-files).
- A _template directory_ containing [HTML templates](#templates) and project
  [configuration files](#configuration).
- A _build directory_ containing the generated website.

By default these directories reside in the project directory and are named
_content_, _template_ and _build_, all three must be mutually exclusive (not
contained within one another). These directories normally reside in the same
folder, but this convention is not enforced: a single template can process
multiple content directories just as a single content directory can be processed
by multiple templates.

For example, here's the builtin blog project structure:

```
├── build
│   ├── indexes
│   │   ├── newsletters
│   │   └── posts
│   │       └── tags
│   ├── newsletters
│   │   └── images
│   └── posts
│       └── images
├── content
│   ├── newsletters
│   │   └── images
│   └── posts
│       └── images
└── template
    ├── init
    │   ├── newsletters
    │   │   └── images
    │   └── posts
    │       └── images
    ├── newsletters
    └── posts
```

Notice that, if we disregard the `build/indexes` and `template/init`
directories, all three directories share the same base directory structure.
Specifically, all three contain the template directory structure and the build
directory is a one-to-one reconstruction of the content directory.

The `build/indexes` directory contains the generated document and tag index
pages; the `template/init` directory is used by the [init
command](#init-command) to initialize new project content directories.

File and directory names should only contain lower case alpha numeric and hyphen
characters. This convention is not enforced but is recommended because it:

* Ensures consistent, readable URLs without ugly encodings for illegal URL
  characters.
* Allows file names to map to reasonable document titles.


.#configuration
## Configuration
Configuration parameters drive website generation. They are specified in TOML
and YAML markup files in the project template directories named `config.toml`
and `config.yaml` respectively. Configuration files are optional, though most
projects will have at least one at the root of the template directory.

The configuration applied to each document or index is computed by merging the
configuration files that lie on the corresponding _template directory_ path.
Configuration files closer to the document or index base directory have higher
precedence than those further up the directory path.

Applicable configuration parameters are merged into the document [front
matter](#front-matter).

The `exclude`, `homepage` and `urlprefix` configuration parameters are site-wide
and are always taken from the template directory root configuration i.e. they
are not subject to subdirectory configuration file parameter merging.

Valid configuration parameters are:

`author`:: Specifies the default document author and is overridden by the
document's _author_ [front matter](#front-matter) variable. TOML example:

    author = "Joe Bloggs"

`exclude`:: A `|` separated list of file and directory paths in the content and
template directories that are excluded from processing.

- The path separator is a slash (`/`) character.
- The paths are relative to the content or template directory and conform to
  patterns matched by the Go [path.Match()
  function](https://golang.org/pkg/path/#Match).
- If the path contains no path separators then it is matched against file names
  e.g. `*.swp` will match all files with the `.swp` file name extension.
- If the path contains path separators then it is matched against file paths
  e.g. `posts/*.md` will only match files in the `posts` directory.
- To exclude a file in the content or template root directories prefix the file
  name with a file separator e.g. `/config.rmu` will exclude `config.rmu` only
  if it is in the top directory.
- TOML example:

    exclude = "config.rmu|.*|*~|4913"

`shortdate`, `mediumdate`, `longdate`:: These are date formats for `shortdate`,
`mediumdate` and `longdate` [document template
variables](#document-template-variables) respectively. The values conform to the
layouts supported by Go [time.Format
function](https://golang.org/pkg/time/#Time.Format). The default values are:

    shortdate = "2006-01-02",
    mediumdate = "2-Jan-2006",
    longdate = "Mon Jan 2, 2006",

`homepage`:: The `homepage` parameter is the name of a file, relative to the
build directory, that is copied by the `build` command to the root of the build
directory and named `index.html`. TOML example:

    homepage = "indexes/posts/docs-1.html"

`paginate`:: This parameter sets the number of documnts per document index
page. The default value is 5. Set to -1 to include all documents on a single
document index page. TOML example:

    paginate = 10

`permalink`:: An optional URL and build path template for built files. The
file's URL and build path is computed by substituting the following `permalink`
placeholders:
..
`%y`:: Four digit publication date year.
`%m`:: Two digit publication date month.
`%d`:: Two digit publication date day of month.
`%f`:: The build file name.
`%p`:: The build file name minus the file name extension.

If the permalink ends with a trailing slash then hindsite creates "pretty" URLs
by writing the build file to `index.html` in a directory with the page’s name.
`permalink` can also be specified in the document [front matter](#front-matter).

TOML examples:

    permalink = "/posts/%y/%m/%d/%f"
    permalink = "/posts/%y-%m-%d/%p/"

A permalink URL will not change provided the `permalink` parameter, the document
publication date and the document slug are not changed. Changing the source
document's content directory location does not change a permalink URL.
..

`templates`:: A `|` separated list of file name extensions specifying document
and static files in the content directory that undergo [text
template](#text-templates) expansion. The file name extensions include the
leading dot character. By default no content files are expanded. `templates` can
also be set in the document [front matter](#font-matter). TOML example:

    templates = ".css|.html|.js|.md"

`timezone`:: Sets the time zone for dates and times. Set to a TZ name from the
IANA Timezone Database or to `"Local"` (the system's local timezone).
TOML example:
..
    timezone = "Pacific/Auckland"

- `timezone` defaults to `"Local"`.
- `timezone` determines the dates displayed by date [template
  variables](#document-template-variables).
- `timezone` is assigned to publication dates that are specified without a
  timezone.
- `permalink` dates are rendered in their assigned timezone, this ensures
  permalinks do not change if the `timezone` is changed.
..

`urlprefix`:: This parameter is prepended to all synthesized document and index
page [URLs](#urls). Its default value is a blank string. TOML examples:

    urlprefix = "/blog"
    urlprefix = "https://www.example.com"

`user`:: This is a user defined key/value map and provides a mechanism for
defining custom template variables. _user_ is merged with the higher precedence
document [front matter](#front-matter) _user_ variable and made available within
documents and document templates. Both keys and values are strings and the keys
must be legal [Go identifier](https://golang.org/ref/spec#Identifiers). For
example:
..

```
# TOML
[user]
banner = "News & Views"
byline = "Ac eros etiam enim pellentesque proin"

# YAML
user:
  banner: News & Views
  byline: Ac eros etiam enim pellentesque proin, tincidunt augue
```

Are available as these template variables:

```
.user.banner
.user.byline
```
..

## Documents
_Documents_ are Markdown (`.md`) files in the project _content directory_. Each
document is generates a wepage e.g. a blog post, a newsletter or an article. The
[build command](#build-command) combines the document with its [layout
template](#html-templates) and writes the resulting HTML webpage to the
corresponding _build directory_ path.

If the document is classified as a template (see the [templates](#configuration)
configuration parameter) then it is rendered as a
[text template](#text-template) prior to layout template processing.

Documents can contain optional [front matter](#front-matter) variables
which are available to the document's _layout template_.

NOTE: In addition to Markdown, _hindsite_ can also process [Rimu
markup](http://rimumarkup.org/) (this feature is currently experimental). The
documentation you are reading is written in Rimu.


## Static files
Static files are non-document (non-Markdown) files in the _content directory_.
These include website resources such as CSS, JavaScript and image files. The
[build command](#build-command) copies static files to the corresponding
location in the _build directory_.

If a static file is classified as a template (see the
[templates](#configuration) configuration parameter) then it is rendered as a
[text template](#text-template) prior to being written to the _build directory_.


## Indexes
The hindsite build command generates paginated document and tag indexes.

- A content directory is indexed when the corresponding template directory
  contains a [docs.html](#html-templates) template.
- Documents from the indexed content directory and all subdirectories contribute
  to the index.
- A project can contain any number of indexed content directories.
- Indexes can be nested. This allows categorized document subdirectories to have
  separate indexes along with aggregated parent directory indexes.
- Generated index pages are written to a directory named `indexes` located at
  the root of the _build directory_.
- The `indexes` directory structure mirrors that of the templates directory with
  indexes located in their corresponding subdirectory.
- The following HTML index files are built for each index:

  `docs-1.html`, `docs-2.html` ...:: Paginated document index files. The number
  of documents per index page is set by the [paginate](#configuration)
  configuration parameter. Rendered with the corresponding
  [docs.html](#html-template) template.

  `tags.html`:: A list of document tags linked to paginated per-tag document
  index files in the `tags` subdirectory. Rendered with the corresponding
  [tags.html](#html-template) template.

  `tags/<tag>-1.html`, `tags/<tag>-2.html` ...:: Paginated per-tag document
  index files. The number of documents per index page is set by the
  [paginate](#configuration) configuration parameter. Rendered with the
  corresponding [docs.html](#html-template) template.


## Front matter
Front matter is a document specific set of named values. Front matter values are
embedded in a front matter header at the beginning of the document file.

The front matter header begins with a start delimiter, which must be the first
line of the file, and ends with the corresponding end delimiter (alson on a
separate line). The delimiter determines the front matter format
([TOML](https://github.com/toml-lang/toml) or
[YAML](https://learn.getgrav.org/advanced/yaml)).

_Start delimiters_::
    TOML: `+++` \
    YAML: `---`, `<!--`, `/***`

_End delimiters_::
    TOML: `+++` \
    YAML: `---`, `-->`, `***/`

Example YAML front matter:

```
---
title:    Foo Bar
description: An brief history of the origins of the foofoo valve.
date:     2018-02-16
tags:     [foo foo valve, qux, baz]
slug:     foofoo-valve-history
draft:    true
---
```
Example TOML front matter:

```
+++
title = "Foo Bar"
description = "An brief history of the origins of the foofoo valve."
date = "2018-02-16"
tags = ["foo foo valve", "qux", "baz"]
slug = "foofoo-valve-history"
draft = "true"
+++
```

### Front matter values
Front matter document values are used in [document template
variables](#document-template-variables).

`author`:: The document author. If not specified it defaults to corresponding
[author](#configuration) configuration parameter value.

`date`:: The document publication date. If it is not specified it is extracted
from the file name `YYYY-MM-DD-` date prefix, if undefined it defaults to Jan 1 0001.
The `date` format is RFC 3339 with the following relaxations:
..
- If the time zone offset is omitted then the [timezone](#configuration)
  configuration parameter is assigned. This has the effect of always rendering
  the date as written irrespective of the `timezone` parameter value.
- If the time is omitted then the time `00:00:00` is used.
- A space character separator (instead of the letter `T`) between the date and
  the time is allowed.

Examples with `timezone = "+13:00"`:

    1979-05-27T07:32:00+02:00   # 1979-05-27T07:32:00+02:00
    1979-05-27T07:32:00         # 1979-05-27T07:32:00+13:00
    1979-05-27 07:32:00         # 1979-05-27T07:32:00+13:00
    1979-05-27                  # 1979-05-27T00:00:00+13:00
..

`description`:: A brief summary of the document. If not specified `description`
defaults to the content up to the first `<!--more-->` tag or blank if there is
no _more_ tag. The description is rendered as Markdown.

`draft`:: If set to "true" then the document is not processed unless the [build
command](#build-command) `-drafts` was specified. Defaults to false.

`layout`:: The name of the template used to render the document. `layout`
defaults to the closest `layout.html` [HTML template](#html-templates).

`permalink`:: If specified it overrides the configuration
[permalink](#configuration) value.

`tags`:: A list of tag keywords and phrases. Examples:
```
# TOML
tags = ["foo foo valve", "qux", "baz"]

# YAML
tags: [foo foo valve, qux, baz]
```

`templates`:: If specified it overrides the configuration
[templates](#configuration) value. The only sensible values in this context are
a blank string (to disable text template expansion) or the document's file name
extension (to enable text template expansion).

`title`:: The document title. If not specified `title` defaults the document
file name stripped of the date prefix (if there is one); with hyphens replaced
by spaces; then capitalized.

`url`:: The synthesized document [URL](#urls).

`user`:: `user` is a user defined key/value map. It is merged with the lower
precedence [user](#configuration) configuration parameter to become the `.user`
template variable. If not specified it defaults to the `user` configuration
parameter value.


## Document template variables
Document template variables are a combination of document [front
matter](#front-matter) values, document [configuration](#configuration)
parameters and synthesized values. They are used in layout and index page
templates and in [text templates](#text-templates).

`.author`:: Document author.
`.body`:: The Markdown document body rendered as HTML.
`.description`:: The HTML document description (HTML).
`.shortdate`, `.mediumdate`, `.longdate`:: Document publication date rendered using the various [configuration](#configuration) date layouts.
`.date`:: Document publication date.
`.modtime`:: Content file modification date and time.
`.next`, `.prev`:: The next and previous document URLs in primary index order.
`.slug`:: Front matter variable.
`.url`: Synthesized document [URL](#urls).
`.tags`:: An iterable list of tags. Each item contains the variables `.tag` (the tag) and `.url` (the tag index URL).
`.title`:: Document title.
`.urlprefix`:: The [configuration](#configuration) `urlprefix`.
`.user`:: The map of [front matter](#front-matter) `user` key/values.


## Templates
_hindsite_ uses Go templates to build webpages. There are two types of
templates:

- [HTML templates](#html-templates) which are used to build index and content
  document HTML webpages.
- Optional [text templates](#text-templates) for content documents and static
  files.

Each template file contributes one or more named templates: the file itself plus
any explicitly declared templates within the file. The implicit file template is
named after its _template directory_ relative file name (this is just a
convention).

Both HTML and text templates share the common [Go template
syntax](https://golang.org/pkg/text/template/).

### HTML templates
HTML templates are used to build index and content document HTML webpages. All
the `.html` files in the project _template directory_ (excluding the `init`
directory) contribute to the set of named HTML templates. All HTML templates
share the same namespace.

The following template files have special significance:

`layout.html`:: Templates named `layout.html` are used to generate content
document webpages. A project can have one or more layout templates. The selected
layout template is the one closest to the content document on the corresponding
_template directory_ path (but this can be overridden using the document [front
matter](#front-matter) _layout_ variable). These conventions allow document
layouts to be assigned per directory and per document. Layouts are rendered with
the corresponding [document template variables](#document-template-variables).

`docs.html`:: This template generates a paginated document index page. The
presence of a `docs.html` template file specifies that the corresponding content
directory is indexed.
..
`docs.html` templates are rendered with the following template variables:

`.docs`:: An iterable list of index page documents. Each list item contains a
set of [document template variables](#document-template-variables).

`.count`:: The total number of documents in the index.

`.page`:: The set of document index pages variables:

      `.number`::: The page number.

      `.url`::: The page URL.

      `.prev`, `.next`, `.first`, `.last`::: Each with the page `.number` and
       `.url` of the previous, next, first and last index pages. For example
      `.page.prev.number` is the page number (1...) of the previous document index page.

`.urlprefix`:: The [configuration](#configuration) `urlprefix`.

`.user`:: The index [configuration's](#configuration) `user` map.
..

`tags.html`:: This optional index template is used to build a `tags.html` tags
index webpage. If it is not present the tags index files are not built.
`tags.html` templates are rendered with the following template variables:
..

`.tags`:: An iterable list, each list item contains: `.tag` (the tag); `.url`
(the URL of of the tag's document index); `.count` (the number of documents with
this tag).

`.urlprefix`:: The [configuration](#configuration) `urlprefix`.

`.user`:: The index [configuration's](#configuration) `user` map.
..


### Text templates
Text template expansion is optional in [documents](#documents) and [static
files](#static-files). By default there is no document or static file expansion,
it is enabled by the [templates](#configuration) configuration parameter.

In addition to [document template variables](#document-template-variables) all
`.txt` files in the project _template directory_ (excluding the `init`
directory) contribute to the set of named text templates available during
document file and static file template expansion.

[Static files](#static-files) that are subject to template expansion can include the same [front matter header](#front-matter)
as [document files](#documents).


## URLs
hindsite synthesizes root-relative document and index page URLs. URLs are
relative to the build directory and are prefixed with the `urlprefix`
[configuration parameter](#configuration). If a [slug](#front-matter) front
matter value is specified it replaces the document file name.

For example, if the build directory is `/myproj/build` and the rendered document
is `/myproj/build/posts/foo.html` then the document URL will be
`/posts/foo.html`. If the `urlprefix` is `/blog` then the URL would be
`/blog/posts/foo.html`. If the document `slug` is `bar` the same URL becomes
`/blog/posts/bar.html`.

The above default behavior can be customized using the `permalink`
[configuration parameter](#configuration).

If you are deploying to a server subdirectory then you need to set the
`urlprefix` configuration variable to ensure synthesized URLs are rooted
correctly. For example, if are deploying to the server `http://example.com/blog`
directory you need to set `urlprefix` to `/blog`.

To synthesize absolute URLs include the URL domain in the `urlprefix`.


## Vocabulary
**build directory**: A directory (default name `build`) into which the generated
Website is written.

**document**: A Markdown (`.md`) in the project _content directory_. Each
document generates a corresponding wepage e.g. a blog post, a newsletter or an
article.

**configuration file**: Optional TOML (`config.toml`) or YAML (`config.yaml`)
files containing configuration parameters located in the project's _template
directory_.

**content directory**: A directory (default name `content`) containing content
[documents](#documents) and [static files](#static-files).

**front matter**: Meta-data embedded at the start of [documents](#documents) and
[static files](#static-files).

**primary index**: An [index](#indexes) that is not nested (has no parent
index). A document can only belong to one primary index.

**project**: A hindsite [project](#projects) consists of a _content directory_,
a _template directory_ and a _build directory_. Hindsite uses the contents of
the template and content directories to generate a website which it writes to
the build directory.

**indexed directory**: A directory in the content directory that generates a
document [index](#indexes) and optional tag indexes. The corresponding template
directory contains a [docs.html](#html-templates) template and an optional
[tags.html](#html-templates) template. The presence of the `docs.html` template
flags the directory as indexed.

**indexed document**: A [document](#documents) residing in an indexed directory.

**indexes directory**: The `indexes` directory at the root of the build
directory containing generated index pages.

**secondary index**: An index that is nested inside a parent index.

**tag**: A keyword or phrase used to categorize a content document.

**template directory**: A directory (default name `template`) containing [HTML
templates](#html-templates) and [configuration files](#configuration).
