# Hindsite Static Website Generator

Notes for yet another static website generator build with Go.

**Q**: Why?

**A**: I decided to start blogging again after a 3 year hiatus. I had been using
Hugo but my old blog would not build with the latest version of Hugo. Time to
debug! At first things when well, after renaming couple of template variable
identifiers my site compiled without errors, but I soon discovered that the
posts and categories indexes were missing. I dug deeper and all the while was
nagged by the thought that for a simple blog the Hugo edifice was just way to
complex. Armed with typical programmer hubris I fancied I could build my own
generator, one that would be a doodle for mere mortals to learn and to use (and
reuse). Good luck with that!


# Names
hindsite (backup name hiatus).
Github name `hindsite`.


## Inspiration and resources
- [Writing a Static Blog Generator in Go](https://zupzup.org/static-blog-generator-go/).
- [How to code a markdown blogging system in Go](http://www.will3942.com/creating-blog-go).
- [Jekyll](https://jekyllrb.com).
- [Hugo](https://gohugo.io/).
- [Introduction to Hugo templating](https://gohugo.io/templates/introduction/)
- [Disqus comments](https://gohugo.io/content-management/comments/).


## Domain
Small static websites with optional indexed documents (blogs posts, newsletters, articles).


## Features
- Easy to get up and running with built-in layouts: install ->
  init -> build -> serve.
- Supports multiple categories of indexed documents each with separate tag and
  document indexes e.g. blog posts and newsletters.


## Hello hindsite
The simplest project:

```
content/
    index.md
template/
    layout.html
build/
```
Build command: `hindsite build`

`index.md` file:
```
Hello *World*!
```

`layout.html` file:
```
<!doctype html>
<head><title>{{.title}}</title></head>
<body>{{.body}}</body>
```

## Design
The overarching goal is a minimal cognative footprint i.e. easy to understand.
This is especially important for casual users who may go months between website updates.

A hindsite project consists of three directories:
TODO

- Hindsite textual content (Markdown files) is rendered with templates to
  generate a static website.
- Structural transparency: The content, template and build directory structures
  match -- content and static resouces reside in the same relative locations.
  Same directory model for content, template and build directories.
- Structural flexibility: There are few restrictions on directory structure and
  file locations.

- Just tags: no taxonomies, no categories see [WordPress Categories vs Tags: How
  Do I Use Them on My
  Blog?](https://www.wpsitecare.com/wordpress-categories-vs-tags/).
- No explicit slugs or permalinks.
- Minimal explicit meta-data.
- No [shortcodes](https://gohugo.io/content-management/shortcodes/) -- use Rimu macros.
- No template functions just a set of template variables, see:
  * https://jekyllrb.com/docs/variables/,
  * https://gohugo.io/variables/).
- No RSS -- hardly anyone even knows what it is anymore!


## Templates
TODO
- Templates don't have to be one per file, you can define multiple in a single file.
- Layout templates can be specified in the front matter and can be any defined template.

### Template variables
Template variables are injected into template files during webpage generation.
There are template variables for document front matter, index generation,
configuration parameters and miscellaneous items such as the current date and
time.

Inside a template, variable names are prefixed with a dot and enclosed by double
curly braces. For example the document `title` variable appears in the template
as`{{.title}}`. See the Go [html/template
package](https://golang.org/pkg/html/template/) more about the use of templates.

Template variable names are:

- Lower case alpha-numeric starting with an alpha character.
- Case sensitive.


## Validation and testing
Here are a few of the many available tools.

### Local web server
In lieu of a built-in `serve` command (not yet implemented).

Run:

   python -m SimpleHTTPServer

Then open you web browser at http://localhost:8000/

I have the `ws` alias for this command.

### Link validation
Use the NPM [broken-link-checker](https://www.npmjs.com/package/broken-link-checker).

  blc -r -e http://localhost:8000/      # Recursively check all local links.
  blc -r http://localhost:8000/         # Recursively check all links.

### HTML validation
Use the NPM [html-validator-cli](https://www.npmjs.com/package/html-validator-cli).

```
  # Single document
  html-validator --verbose --format=text --file=doc.html
  # All .html docs recursively.
  for f in $(find . -name '*.html'); do
    echo $f
    html-validator --verbose --format=text --file=$f
  done
```

I added the `html-validator-all` alias to recursively validate all HTML files in current directory.

```
alias html-validator-all='for f in $(find . -name "*.html"); do echo $f; html-validator --verbose --format=text --file=$f; done'
```


## Coding
- Use the Go [html package](https://godoc.org/golang.org/x/net/html) to parse HTML.


## Vocabulary
**project**: A hindsite [project](#projects) consists of a _content directory_,
a _template directory_ and a _build directory_. Hindsite uses the contents of
the template and content directories to generate a website which it writes to
the build directory.

**content directory**: A directory (default name `content`) containing content
documents along with optional document meta-data (front matter) and optional
static resources (e.g. images). The content directory structure mirrors that of
the template directory.

**template directory**: A directory (default name `template`) containing webpage
templates along with optional configuration files and static resources to build
a website. The template directory is a blueprint, it contains everything needed
to build a Website minus the textual content.

**build directory**: A directory (default name `build`) into which the generated
Website is written.

**content document**: A readable-text markup file (`.{md,rmu}`) that generates the
textual content of a corresponding HTML web page.

**configuration file**: Optional TOML or YAML files `config.{toml,yaml}`
containing configuration parameters located in the content
template directories.

**template**: A Go HTML template file (`.html`). Templates reside in the template
directory. Templates are combined with document content and meta-data to
generate HTML document and index pages.

**document templates**: Document templates (also called layout templates) are used to render content documents.
TODO: Can be specified explicity by template name or ...
Each content document has a template named `layout.html` in the corresponding
template directory. If there is no `layout.html` in the corresponding template
directory then the parent template directories are searched right up to the
templates root directory.

**index templates**: Index templates are used to render document index web pages.

**index**: A generated HTML Webpage containing a list of content documents.

**primary index**: An index that is not nested. A document can only belong to
one primary index.

**secondary index**: An index that is nested.

**tag**: A keyword or phrase used to categorize a content document.

**tag index**: Indexed document tags can be used to generate a tag index along
with per tag document indexes. It usually makes sense to confine tag indexes to
primary indexes.


**static file**: A [static file](#static-files.html) is a file in the content or
template directories that is not a document or a template or a configuration
file.

**example document**: A text markup document residing in the template directory.
Example documents are are copied to the content directory when the project is
initialized. This provides a mechanism for sharing your website design complete
with example documents: just share your website template directory.

**front matter**: Meta-data embedded at the start of content documents.


## Implementation
- By convention the content, template and build directories normally reside in
  the same folder, but this convention is not enforced.

- There is a close one-to-one mapping between content, template and build file
  paths. This lightens the congative load especially when it comes to authoring
  cross-page URLs.

Website with blog and newsletters:

```
content/
    config.toml
    config.rmu
    pages/
        index.md
        about.md
    blog/
        example.md
        foobar-image.png
        2008-12-10-post-zero.rmu
    newsletters/
        2018-02-07.md
        2018-02-14.md
    static/
template/
    config.toml
    layout.html
    CNAME
    favicon.ico
    pages/
        layout.html
    blog/
        layout.html
        docs.html
        tags.html
        example.md
    newsletters/
        layout.html
        docs.html
        example.md
    static/
        main.css
        logo.jpg
build/
    favicon.ico
    CNAME
    pages/
        index.html
        about.html
    blog/
        post-one.html
        foobar-image.png
        2008-12-10-post-zero.html
    newsletters/
        2018-02-07.html
        2018-02-14.html
    static/
        main.css
        logo.jpg
    indexes/
        blog/
            all.html
            docs-1.html
            docs-2.html
            tags.html
            tags/
                kotlin.html
        newsletters/
            docs-1.html
```

- Template files are preprocessed by the
  Go template engine.

/*
  If a same-named `.toml` is present it will be injected into the template.
  A `.toml` file with the same name as a directory is injected into all templates in the
  directory e.g. `blog.toml` will be injected into all documents in the `blog` directory.
*/

## File and directory names
Content file and directory names should only contain lower case alpha numeric
and hyphen characters. This is is mandatory and:

* Ensures consistent, readable URLs without ugly encodings for illegal URL
  characters.
* Allows file names to map to reasonable document titles.


## URLs
Hindsite synthesizes document URLs for index page links. By default synthesized
URLs are root-relative to the content directory. For example:

    Content directory: /tmp/project/content
    Content document:  /tmp/project/content/posts/post1.md
    Synthesised URL:   /posts/post1.html

This works fine if you deploy the build to the root of your website. For example
if your website address is `http://example.com` then the synthesised
root-relative `/posts/post1.html` URL is equivalent to
`http://example.com/posts/post1.html`.

If you are deploying to a server subdirectory then you need to set the
`urlprefix` configuration variable to ensure synthesized URLs are rooted
correctly. For example, if are deploying to the server `http://example.com/blog`
directory you need to set `urlprefix` to `/blog`. The synthesized URL from the
previous example now becomes `/blog/posts/post1.html` (equivalent to
`http://example.com/blog/posts/post1.html`).

To synthesize absolute URLs include the URL domain in `urlprefix`. Using the
previous example, setting `urlprefix` to `http://example.com/blog` will
synthesize the absolute URL `http://example.com/blog/posts/post1.html`.

Use relative URLs for authored links between document pages -- it's less verbose
and side-steps root-relative URL issues. For example `./post2.html` links to a
document in the same directory.

See [HTML File Paths](https://www.w3schools.com/html/html_filepaths.asp).

If you want to hide URL file name extensions you will need to configure your
server, see [How to remove file extension from website
address?](https://stackoverflow.com/questions/6534904/how-to-remove-file-extension-from-website-address).


## Indexes
- Documents and tag indexes are created by the build command.
- A project can contain any number of indexed content directories.
- Any content directory is indexed when the corresponding template directory
  contains a `docs.html` template.
- Documents from the indexed directory and all subdirectories belong to the index.
- Indexes can be nested. This allows categorized document subdirectories to have
  separate indexes along with aggregated parent directory indexes.
- Generated index pages are written to a directory named `indexes` located at the
  root of the build directory.


TODO

- There are two types of indexes: document indexes and tags indexes.


**indexed document**: A content document residing in an indexed directory. Indexed
documents must have a title and a publication date. Tags are optional.

**indexed directory**: A directory in the content directory that generates a
document index and optional tag indexes. The corresponding template directory
contains a `docs.html` template and optional `tags.html` templates. The
presence of the `docs.html` template flags the directory as indexed.

**indexes directory**: A directory in the build directory containing generated
index pages.

## Document indexes
- The built indexes directory contains a directory for each indexed document directory.
- The indexes directory structure mirrors the templates directory indexes.
- The following HTML index files are built for each index:

  * `docs-1.html`, `docs-2.html`... : a paginated list of the all documents.
  * `tags.html`: a list of document tags linked to files named like
    `tags/SLUGIFIED_TAG_NAME.html` (one per tag) each containing a list of
    related posts. Tags index files are optional and will be generated when a
    `tags.html` template appears in the corresponding template directory.


## Template variables
Template variables are used in templates. They allow context specific content to
be rendered in the output documents. Variables are specific to the document and
index templates.

### Site variables
All templates have access to site variables.

```
.site.urlprefix        root configuration urlprefix
```

### User variables
All templates have access to user defined configuration file variables.

For example, these `config.toml` configuration file entries:

```
[user]
banner = "News & Views"
byline = "Ac eros etiam enim pellentesque proin"

```

Or these `config.yaml` file entries:

```
user:
  banner: News & Views
  byline: Ac eros etiam enim pellentesque proin, tincidunt augue
```

Are available as these template variables:

```
.user.banner
.user.byline

```

User template variables are subject to all the normal configuration file precedence and merging
rules.

### Document template variables
These variables relate to a single document. They are rendered by the
corresponding `layout.html` template.

```
.title
.date (alias for mediumdate)
.shortdate
.mediumdate
.longdate
.author
.synopsis            rendered synopsis HTML
.addendum            rendered addendum HTML
.slug
.url
.tags                an iterable list of per-tag .tag and .url variables
.body                rendered content HTML
.next                contains .url of next document (1)
.prev                contains .url of previous document (1)
```
(1) Indexed documents only.

### Document index template variables
These variables relate to the collection of documents belonging to a document
index page. They are rendered by the corresponding `docs.html` template. In
addition to document variables there are variables for the previous, next, first
and last document index page.

```
.docs                an iterable list of documents for the current page
.count               the total number of documents in this index
.tag                 tag name (tag index pages only)
.page.number         current page number
.page.url            current page URL
.page.prev           .number and .url of previous document
.page.next           .number and .url of next document
.page.first          .number and .url of first document
.page.last           .number and .url of last document
```

### Tags index page template variables
These variables relate to the collection of tags belonging to a document
index. Thay are rendered by the corresponding `tags.html` template.

```
.tags     an iterable list, one per tag.

Each item in the tags list contains:

.tag      the tag
.url      URL of of the tag's document index
.count    the number of documents with this tag
```


## Configuration and front matter variables
Additional build information is sourced from configuration files and document front matter.

### Configuration files
TODO: Should multiple configuration files in the document path be aggregated
(template path then content path, top to bottom)?

- Configuration files and front matter are optional.
- Configuration files and front matter are encoded in TOML or YAML (take your pick).
- Configuration files are named `config.{toml,yaml}` and are located and are
  located at the roots of the contents and templates directories (values from
  the latter take precedence).

Example `config.toml` file:

```
# Prepended to synthesised root-relative URLs.
#urlprefix = "/blog"

# Copy this file to `/index.html`.
# The file path relative to the build directory.
#homepage = "indexes/blog/all-1.html"

# Paginate sets the number of documents per document index page (1..).
# Set to -1 to to include all documents in a single page.
#paginate = 5

# A `|` separated list of content directory file and directory names that
# should not be processed (wildcards allowed). Directory names end in a slash.
#exclude = "config.rmu|main/"

# Default document author.
#author = "Joe Bloggs"

# Sets the time zone for site generation. Set to "Local" or a TZ name from IANA Timezone Database.
#timezone = "Local"

# Date formats for template variables.
#shortdate =  "2006-01-02",
#mediumdate = "2-Jan-2006",
#longdate =   "Mon Jan 2, 2006",

```

## Front matter
Document front matter is embedded at the start of content files (c.f.
https://www.npmjs.com/package/marked-metadata,
https://gohugo.io/content-management/front-matter/).

Embedded YAML with `<!--`, `-->` or `---` delimiters e.g.

```
<!--
title:    Foo Bar
synopsis: An brief history of the origins of the foofoo valve.
addendum: This article was updated March, 2018.
date:     2018-02-16
tags:     foo foo valve, qux, baz
slug:     foofoo-valve-history
draft:    true
-->
```
- `tags` are a comma-separated string. Tags can also be encoded as a YAML list
  or a TOML array called `categories` c.f. Hugo.
- The variable name `description` is an alias for `synopsis`.
- The HTML comment delimiters are preferable because:
  * They ignored if the document is rendered by other applications.
  * The front matter is retained by the generated HTML web page.
- [YAML syntax](https://learn.getgrav.org/advanced/yaml).
- See [go-yaml](https://github.com/go-yaml/yaml) package.

Embedded TOML (c.f. Hugo front matter):

```
+++
title = "Foo Bar"
description = "An brief history of the origins of the foofoo valve."
date = "2018-02-16"
categories = [
  "foo foo valve",
  "qux",
  "baz"
]
slug = "foofoo-valve-history"
draft = "true"
+++
```
See:

- [TOML](https://github.com/toml-lang/toml#user-content-inline-table).
- Go TOML parser https://github.com/BurntSushi/toml

Implicit values (if the document does not contain a front matter header):

- `title` defaults the document file name (sans drafts and date prefixes with
  hyphens replaced by spaces). NOTE: decided not to extract first `h1` title as
  that necessitates rendering the page first.
- `date` defaults to file name `YYYY-MM-DD-` date prefix e.g.
  `2018-02-14-newsletter.md`.
- `author` defaults to the configuration file value, failing that, blank.
- `synopsis` defaults to the content up to the `<!--more-->` tag or blank if
  there is no tag. Processed as markup.
- `addendum` (a general purpose content field) defaults to blank. Processed as markup.
- `draft` is true if the first letter of the content file name is a tilda (this
  overrides the front matter `drafts` variable).


## Projects
A hindsite project consists of a _content directory_, a _template
directory_ and a _build directory_. Hindsite uses the contents of the template
and content directories to generate a website which it writes to the build
directory.

Content, template and build directories must be mutually exclusive (not
contained within one another). Typically all three directories are in a single
project directory:

```
content/
    content files...
template/
    template files...
build/
    website files...
```
### Multi-content and Multi-template projects
Content and template directories are not bound exclusively to each other: a
single template process multiple content directories just as a single content
directory can be processed by multiple templates.


## Static files
A static is a file in the content or template directories that is not a
document or a template or a configuration file. Static files (typically CSS and
images) are copied verbatim to the corresponding location in the build directory
by the build command. The content directory is processed after the template
directory.

### Static file exclusion
The `config.{toml,yaml}` configuration file `exclude` value is a `|` separated
list of file names to be excluded (wildcards allowed). Static files that match
these files names are not copied to the build directory. The `exclude` file
names can contain wildcards conforming to the Go [filepath.Match()
function](https://golang.org/pkg/path/filepath/#Match). To exclude entire
directories specify a directory path relative to the content or templates
directories ending with a slash character.

NOTE: I think we should extend `exclude` to all files, it's more general and
simpler to understand.


## Content document markup
Content documents can be written in Markdown or Rimu.

### Rimu markup
The optional `config.rmu` file at the root of content directory will be
prepended to all Rimu files before they are rendered and mostly used to define
macro values.

You can distribute `config.rmu` as a template example file and the `init` command
will install it in the content directory.


## CLI

hindsite help:
```
Hindsite is a static website generator.

Usage:

    hindsite init  [PROJECT_DIR] [OPTIONS]
    hindsite build [PROJECT_DIR] [OPTIONS]
    hindsite serve [PROJECT_DIR] [OPTIONS]
    hindsite help  [TOPIC]

The commands are:

    init    create a new project
    build   generate the website
    serve   start development webserver
    help    display documentation

The options are:

    -content  CONTENT_DIR
    -template TEMPLATE_DIR
    -build    BUILD_DIR
    -port     PORT
    -builtin  NAME
    -clean
    -drafts
    -v

Use "hindsite help [command]" for more information about a command.

Additional help topics:

    project describes a hindsite project
    vocab   the hindsite vocabulary
```

### init command
hindsite help init:
```
Create a new project

Usage:

    hindsite init [options]...



hindsite init [-builtin NAME] [-project PROJECT_DIR] [-template TEMPLATE_DIR] [-content CONTENT_DIR]
hindsite build [-clean] [-drafts] [-project PROJECT_DIR] [-template TEMPLATE_DIR] [-content CONTENT_DIR] [-build BUILD_DIR]
hindsite serve [-port PORT] [-project PROJECT_DIR] [-build BUILD_DIR]
hindsite -h | --help | help

```
- `PROJECT_DIR` defaults to `.`
- `CONTENT_DIR` defaults to `content`
- `BUILD_DIR` defaults to `build`
- `TEMPLATE_DIR` defaults to `template`
- The `-v` (verbose) increases the verbosity. Specify it twice for even more information.

### Init command
Creates new project content directory from an existing template directory.

- If the `-builtin NAME` option is specified the named builtin template will be
  installed in the project templte directory.
- Clones the `TEMPLATE_DIR` directory structure to `CONTENT_DIR`.
- Copies example content documents to `CONTENT_DIR`.
- If the `CONTENT_DIR` contains existing files hindsite will refuse to continue.


### Build command
Build static website from content and template directories.

- Include draft pages if the `-drafts` option is specified.
- If the `-clean` option is specified the the entire contents of the build
  directory is deleted, forcing all files to be rebuilt. By default, only new
  and updated documents or documents whose layout template has been modified are
  processed.

Build sequence:

- Check for pathalogical content, template and build directories overlap.
- Check that all directory paths and content document file names are slugified.
- Check configuration file validity.
- Delete contents of build directory (`-clean` build option).
- Copy static files from template to build directory.
  files).
- Copy static files from content to build directory (content directory files
  take precedence).
- Process all content documents.
- Process each indexed directory generating index web pages.

Corner-case examples:

```
# Template and content in ./docs output to ./build
hindsite build -content docs -template docs

# Template and content in current directory, output to ./build
hindsite build -content . -template .

```

#### Incremental build
Hindsite only rebuilds those documents and indexes that require updating.
Incremental builds are faster and they also facilitate incremental deployment.
Use the `-clean` build command option if you want to force a complete rebuild.

A document is rebuilt if it has been modified since it was last built or if any
project configuration or template file has been modified since it was last
built.

An index file is rebuilt if any contributing documents been modified since it
was last built or if any project configuration or template file has been
modified since it was last built.

### Serve command
the _serve_ command opens a development server on the `BUILD_DIR` directory.

- The `-port PORT` option sets the server port (defaults to 1212).
- It handles the `urlprefix` configuration option correctly.


### Dates
#### Input
- Front matter document date is assumed to be in UTC if timezone is not specified.

The RFC 3339 format is recognised. The following relaxations are permitted:

- If the time zone offet is omitted then UTC is assumed.
- If the time is omitted then the time `00:00:00` is used.
- A space character separator (instead of the letter `T`) between the date and the time is allowed.

e.g. with `timezone = "+13:00"`:

    1979-05-27T07:32:00+13:00   # follows the RFC 3339 spec
    1979-05-27T07:32:00         # 1979-05-27T07:32:00+13:00
    1979-05-27 07:32:00         # 1979-05-27T07:32:00+13:00
    1979-05-27                  # 1979-05-27T00:00:00+13:00

#### Output
- Docment template publication date variables: shortdate, mediumdate (alias date), longdate
- If `timezone` config parameter is not specified the local time offset is used.

See:

- https://www.ietf.org/rfc/rfc3339.txt
- https://golang.org/pkg/time/


## Automatic rebuild and browser reload
Use a file watcher program (e.g. [entr(1)](http://entrproject.org/)) in
conjunction with a browser reload application (e.g. the Chrome
[LivePage](https://chrome.google.com/webstore/detail/livepage/pilnojpmdoofaelbinaeodfpjheijkbh)
extension). 

The following example starts the hindsite development server then uses
[entr(1)](http://entrproject.org/)) to watch all files in the content and
template directories:

    $ hindsite serve &
    $ (find content && find template) | entr hindsite build

**NOTE**: When navigating back to another page it does not appear updated
despite the fact that the server is receiving LivePage requests and you have to
manually refreshing the browser.



### Implementation notes
- Internally all directory and file paths are absolute and platform specific (manipulated by the `path/filepath` package).

## Testing
Need to test of example projects and then compare the contents of the
build directory to an `expected` directory for equality.

- This would provide a way to test arbitrarily complex projects.
- But approach is unwieldy for error scenarios.
- The test cases to include ./examples/
- Use these projects for benchmarks.
