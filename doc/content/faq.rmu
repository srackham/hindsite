# Hindsite FAQ


## Why another website generator
Long story short, I wanted a fast, light 
I resumed updating my blog after a 3 year hiatus, after resolving

but my old Hugo 0.13 blog would not build with the latest version of Hugo. Time to
debug! At first things when well, after renaming couple of template variable
identifiers my site compiled without errors, but I soon discovered that the
posts and categories indexes were missing. I dug deeper and all the while was
nagged by the thought that for a simple blog the Hugo edifice was just way to
complex. Armed with typical programmer hubris I fancied I could build my own
generator, one that would be a doodle for mere mortals to learn and to use (and
reuse). Good luck with that!


## How fast is hindsite?
Around ten times faster than Hugo in informal tests based on 5000 Markdown posts
(5000 files, 31MB total) generated by
[generate-articles.py](https://gist.github.com/jaden/1ce5a7192d8ee8e4c112).

- Run on Dell XPS27 PC under Windows 10.
- hugo version v0.37 (64 bit). Setup Hugo site following the [Quick
  Start](https://gohugo.io/getting-started/quick-start/) instructions.
- hindsite v1.0.0 (64 bit).

NOTE: Exclude the project folder from Windows Defender from anti-virus
real-time protection (this resulted a 4x performance boost for both hindsite and
hugo).

_hugo_::
- Clean build (5000 documents and indexes): 115s to 125s
- Subsequent builds: Same as clean build.

_hindsite_::
- Clean build (5000 documents and indexes): 10.37s
- Incremental build (updating one document and indexes): 2.78s
- Incremental build (updating no documents or indexes):1.14s

hindsite runs even fast on Linux.

/*
hindsite ran even fast on Linux (Unbuntu MATE 16.04 VM on Dell Optiplex 9210):

- Clean build (5000 documents and indexes): 2.83s
- Incremental build (updating one document and indexes): 1.37s
- Incremental build (updating no documents or indexes):0.63s
*/

## How do I escape template expansion in content files?
Quote the template variable as a raw string. For example, to render this:

    {{`{{.body}}`}}

Use this:

    {{"{{`{{.body}}`}}"}}

See [How do I escape "{{" and "}}" delimiters in Go templates?
](https://stackoverflow.com/questions/17641887/how-do-i-escape-and-delimiters-in-go-templates)


## How can I partition documents into separate categories
Put them in separate indexes. Indexes are similar to [Wordpress
categories](https://en.support.wordpress.com/posts/categories-vs-tags/) but they
are file system based so you do not have to assign them explicitly. Documents
belong to their own and parent indexes (not to arbitrary indexes).

## I want a single page document index
Set the `paginate` configuration parameter to `-1` and all indexed documents
will appear on the first page.


## I want both paginated and single page document indexes
This technique creates a second nested index:

1. Create a child index with the `paginate` configuration parameter set to `-1`.
   For example:
```
template/
    posts/
        docs.html           # Paginated document index template.
        all/
            docs.html       # Non-paginated (single-page) document index template.
            config.toml     # paginate = -1
```

2. Create a corresponding content child directory and move the content documents into it:
```
content/
    posts/
        all/    # Move documents here from posts.
```

Each index has it's own page template. This technique can be extended to create
multiple additional indexes over a the same indexed document set.


## I don't like file name extensions in URLs how can I remove them
Web servers can be configured to do this, see [How to remove .html from
URL](https://stackoverflow.com/questions/5730092/how-to-remove-html-from-url).


.#auto-rebuild
## Automatic rebuild and browser reload
When editing document source files it's nice to have the output update
automatically in your Web browser when files are saved. This can be achieved
using a file watcher program to auto rebuild the website in conjunction with a
browser auto reload extension.

For example, hindsite includes an auto rebuild script called
[watch-hindsite.sh](TODO), it runs on Linux and uses the inotify-tool
inotifywait(1) command to detect project changes and then automatically run the
hindsite `build` command. Notice that the watcher script performs incremental
and non-incremental builds based on the type of file system notification (see
[Incremenal build](reference.html#incremental-build)).

If you preprocess static content e.g. with SASS, LESS etc. you will also need to
conditionally rebuild them.