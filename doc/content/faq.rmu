# Hindsite FAQ


## Does hindsite support themes?
Themes are baked in, every [project template directory]({reference}/#projects)
is a theme and the [init command]({reference}/#init-command) is the "theme"
installer.

## How do I stop hindsite processing dotfiles?
Add a `.*` pattern to the [`exclude` configuration
parameter]({reference}/#configuration-parameters).


## Should I enable document and static file text template expansion?
You should only enable [text template]({reference}/#text-templates) expansion if
you need it. If performance is an issue, only enable it for those documents or
directories that need it.


## How can I customize `.date` and `.modtime` template variable formats?
Use the Go [Format function](https://golang.org/pkg/time/#Time.Format). For
example:

    {{.modtime.Format "Monday, 02-Jan-06 15:04:05 MST"}}

The `.shortdate`, `.mediumdate` and `.longdate` [document template
variables]({reference}/#document-template-variables) are simpler and preferable
to using `.date` directly.


/*
## How do I escape template expansion in content files?
Quote the template variable as a raw string. For example, to render this:

    {{.body}}

Use this:

    {{`{{.body}}`}}

See [How do I escape "{{" and "}}" delimiters in Go templates?
](https://stackoverflow.com/questions/17641887/how-do-i-escape-and-delimiters-in-go-templates)
*/


## How can I partition documents into separate categories
Put them in separate indexes. [Indexes]({reference}/#indexes) are similar to [Wordpress
categories](https://en.support.wordpress.com/posts/categories-vs-tags/) but they
are folder based so you do not have to assign them explicitly.


## I want a single page document index
Set the [`paginate` configuration
parameter]({reference}/#configuration-parameters) to `-1` and all indexed
documents will appear on the first page.


## I want both paginated and single page document indexes
This technique creates a second nested index:

1. Create a child index with the `paginate` configuration parameter set to `-1`.
   For example:
```
template/
    posts/
        docs.html           # Paginated document index template.
        all/
            docs.html       # Non-paginated (single-page) document index template.
            config.toml     # paginate = -1
```

2. Create a corresponding content child directory and move the content documents into it:
```
content/
    posts/
        all/    # Move documents here from posts.
```

Each index has it's own page `docs.html` template. This technique can be
extended to create multiple additional indexes over a the same indexed document
set.


## Relative or root-relative intra-site links?
A relative link is a URL equivalent to a relative directory path e.g.
`./images/beach.jpg`. A root-relative link is relative to the website root and
begins with a slash e.g. `/images/beach.jpg`.

- Relative links are not affected by the `urlprefix` whereas root-relative links
  are.
- Relative links are broken by changes to the content document location and the
  `permalink` configuration parameter, root-relative links are not.

The `urlprefix` and `permalink` parameters do not tend to change much so this
is probably just something to be aware of. Although you could enable document template
expansion and prefix root-relative URLs with `{{.urlprefix}}`.

## How fast is hindsite?
Short answer: it depends on your project's size and structure and the platform
you run it on.

hindsite compares favorably with [Hugo](https://gohugo.io/) (which advertises
itself as "The worldâ€™s fastest framework for building websites").

In informal measurements carried out on a site with 5000 Markdown posts (20MB
total) hindsite was around four times faster than Hugo on full rebuilds but on
subsequent incremental rebuilds hindsite ranges from six times faster than Hugo
(if only related indexes pages are rebuilt) to around ten times slower than Hugo
(if all index pages have to be rebuilt).

_Platform_::
hindsite v1.0.0 (64 bit) running on Dell XPS27 PC under Windows 10.

_Build times and memory consumption_::
- Clean build (all documents and indexes): 20.72s (27.08s with "pretty" URLs)
- Partial build (updating one document and entire index): 3.85s
- Partial build (updating one document): 0.07s
- Server while running consumed 58.4MB of RAM.

The same documents were built with Hugo:

_Platform_:: Hugo v0.37 (64 bit) running on Dell XPS27 PC under Windows 10. Hugo
setup as per the Hugo [Quick
Start](https://gohugo.io/getting-started/quick-start/) instructions.

_Build times and memory consumption_::
- Full rebuild (all documents and indexes): 120s.
- Server command partial rebuild: 0.37s
- Server while running consumed 10.8GB of RAM.

The Hugo server has fast and consistent incremental rebuild times for
virtually any changes.

NOTE: Exclude the project folder from Windows Defender anti-virus real-time
protection (not doing this imposed a 4x performance decrease for both
hindsite and Hugo).