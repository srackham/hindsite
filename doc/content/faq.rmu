# Hindsite FAQ


## Why another website generator?
Late 2017 I upgraded to the latest version of Hugo after a three year break from
blogging. Faced with the usual upgrade compatibility issues plus a broken theme
I found myself reluctantly relearning lots of stuff that was just not relevant
to my modest requirements. I wasn't having fun, so I did what every programmer
feels like doing in this situation, I wrote my own program.


## How fast is hindsite?
On full rebuilds hindsite is around six times faster than Hugo in informal tests
based on 5000 Markdown posts (5000 Markdown files, 20MB total). hindsite is
around ten times faster than Hugo for full rebuilds but on subsequent
incremental rebuilds Hugo  is about twenty times faster than hindsite.

The results run on Dell XPS27 PC under Windows 10 are:

_hugo_:: hugo version v0.37 (64 bit). Hugo setup as per the Hugo [Quick
Start](https://gohugo.io/getting-started/quick-start/) instructions.

- Full rebuild (5000 documents and indexes): 120s.
- Server command incremental: 0.37s

Hugo server renders the website in-memory and is exceedingly fast and consistent
in terms of render time for virtually any changes.

_hindsite_:: hindsite v1.0.0 (64 bit).
- Clean build (5000 documents and indexes): 13.95s (22.10s with "pretty" URLs)
- Incremental build (updating one document and entire index): 3.85s
- Incremental build (updating one document): 0.02s

NOTE: Exclude the project folder from Windows Defender anti-virus real-time
protection (not doing this resulted in a 4x performance decrease for both
hindsite and hugo).

In terms of memory footprint hindsite is much lighter (Hugo builds an in-memory
website:

_hugo_:: The server when running consumed 10.8GB of RAM.
_hindsite_:: The hindsite server consumed 58.4MB of RAM.

/*
hindsite runs faster on Linux:

_hindsite_:: hindsite v1.0.0 (64 bit).
- Clean build (5000 documents and indexes): 5.15s
- Incremental build (updating one document and indexes): 4.10s
- Incremental build (updating no documents or indexes):0.60s

This suggests:

- Documents rendering: 1.05s (20%)
- Index rendering: 3.5s (68%)
- Scanning and parsing: 0.60s (12%)
*/


## How can you automatically reload the browser
When editing document source files it's nice to have the output update
automatically in your Web browser when the hindsite _serve_ command updates
webpages. Browser live-reload can be achieved using a browser extension.


## Should I enable document and static file template expansion?
You should only enable it if you need it and, if performance is an issue, only
for the documents or directories that need it.


## How can I customize `data` and `modtime` template variable formats?
TODO

    {{.modtime.Format "Monday, 02-Jan-06 15:04:05 MST"}}


## How do I escape template expansion in content files?
Quote the template variable as a raw string. For example, to render this:

    {{.body}}

Use this:

    {{`{{.body}}`}}

See [How do I escape "{{" and "}}" delimiters in Go templates?
](https://stackoverflow.com/questions/17641887/how-do-i-escape-and-delimiters-in-go-templates)


## How can I partition documents into separate categories
Put them in separate indexes. Indexes are similar to [Wordpress
categories](https://en.support.wordpress.com/posts/categories-vs-tags/) but they
are file system based so you do not have to assign them explicitly. Documents
belong to their own and parent indexes (not to arbitrary indexes).

## I want a single page document index
Set the `paginate` configuration parameter to `-1` and all indexed documents
will appear on the first page.


## I want both paginated and single page document indexes
This technique creates a second nested index:

1. Create a child index with the `paginate` configuration parameter set to `-1`.
   For example:
```
template/
    posts/
        docs.html           # Paginated document index template.
        all/
            docs.html       # Non-paginated (single-page) document index template.
            config.toml     # paginate = -1
```

2. Create a corresponding content child directory and move the content documents into it:
```
content/
    posts/
        all/    # Move documents here from posts.
```

Each index has it's own page template. This technique can be extended to create
multiple additional indexes over a the same indexed document set.