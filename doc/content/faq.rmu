# Hindsite FAQ


## Why another website generator?
Late 2017 I upgraded to the latest version of Hugo after a three year break from
blogging. Faced with the usual upgrade compatibility issues plus a broken theme
I found myself reluctantly relearning lots of stuff that was just not relevant
to my modest requirements. I wasn't having fun, so I did what every programmer
feels like doing in this situation, I wrote my own program.


.#auto-rebuild
## How can you automatically rebuild and reload?
When editing document source files it's nice to have the output update
automatically in your Web browser when files are saved. This can be achieved
using a file watcher program in conjunction with a browser auto reload
extension.

For example, hindsite includes an auto-rebuild script called
[`watch-hindsite.sh`](TODO), it runs on Linux and uses the
[inotify-tools](https://github.com/rvoicilas/inotify-tools) `inotifywait(1)`
command to detect project changes and then automatically run the hindsite
`build` command. Notice that the watcher script performs incremental and
non-incremental builds based on the type of file system notification (see
[Incremental builds](reference.html#incremental-builds)).

If you preprocess static content e.g. with SASS, LESS etc. you will also need to
conditionally rebuild them.


## How fast is hindsite?
Around ten times faster than Hugo in informal tests based on 5000 Markdown posts
(5000 Markdown files, 29MB total) generated by
[generate-articles.py](https://gist.github.com/jaden/1ce5a7192d8ee8e4c112).
Run on Dell XPS27 PC under Windows 10.

_hugo_:: hugo version v0.37 (64 bit). Setup Hugo site following the Hugo [Quick
  Start](https://gohugo.io/getting-started/quick-start/) instructions.
- Clean build (5000 documents and indexes): 115s to 125s
- Subsequent builds: Same as clean build.

_hindsite_:: hindsite v1.0.0 (64 bit).
- Clean build (5000 documents and indexes): 10.37s
- Incremental build (updating one document and indexes): 2.78s
- Incremental build (updating no documents or indexes):1.14s

hindsite runs even faster on Linux.

NOTE: I don't know why hindsite is faster, possibly something I've overlooked.
In any case, I've made the benchmark files available on the [download
page](TODO) so you can try it yourself.

NOTE: Exclude the project folder from Windows Defender anti-virus real-time
protection (not doing this resulted in a 4x performance decrease for both
hindsite and hugo).


## Should I enable document and static file template expansion?
Because the additional processing affects performance you should only enable it
if you need it and, if performance is an issue, only for the documents or
directories that need it.


## How do I escape template expansion in content files?
Quote the template variable as a raw string. For example, to render this:

    {{.body}}

Use this:

    {{`{{.body}}`}}

See [How do I escape "{{" and "}}" delimiters in Go templates?
](https://stackoverflow.com/questions/17641887/how-do-i-escape-and-delimiters-in-go-templates)


## How can I partition documents into separate categories
Put them in separate indexes. Indexes are similar to [Wordpress
categories](https://en.support.wordpress.com/posts/categories-vs-tags/) but they
are file system based so you do not have to assign them explicitly. Documents
belong to their own and parent indexes (not to arbitrary indexes).

## I want a single page document index
Set the `paginate` configuration parameter to `-1` and all indexed documents
will appear on the first page.


## I want both paginated and single page document indexes
This technique creates a second nested index:

1. Create a child index with the `paginate` configuration parameter set to `-1`.
   For example:
```
template/
    posts/
        docs.html           # Paginated document index template.
        all/
            docs.html       # Non-paginated (single-page) document index template.
            config.toml     # paginate = -1
```

2. Create a corresponding content child directory and move the content documents into it:
```
content/
    posts/
        all/    # Move documents here from posts.
```

Each index has it's own page template. This technique can be extended to create
multiple additional indexes over a the same indexed document set.


## I don't like file name extensions in URLs how can I remove them
Web servers can be configured to do this, see [How to remove .html from
URL](https://stackoverflow.com/questions/5730092/how-to-remove-html-from-url).