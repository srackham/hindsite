// Code generated by go-bindata.
// sources:
// ../examples/builtin/blog/template/config.toml
// ../examples/builtin/blog/template/favicon.ico
// ../examples/builtin/blog/template/layout.html
// ../examples/builtin/blog/template/main.css
// ../examples/builtin/blog/template/partials.html
// ../examples/builtin/blog/template/posts/docs.html
// ../examples/builtin/blog/template/posts/layout.html
// ../examples/builtin/blog/template/posts/tag.html
// ../examples/builtin/blog/template/posts/tags.html
// ../examples/builtin/minimal/template/index.md
// ../examples/builtin/minimal/template/layout.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _blogTemplateConfigToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xc9\xb1\x4e\xc3\x30\x10\x06\xe0\xdd\x4f\x61\x39\x73\xe3\xb6\x03\x1b\x03\x3b\x62\x40\x62\x60\x42\x26\xfe\x9b\x9c\xb0\x7d\xd6\xdd\x05\x02\xe2\xe1\xab\x64\xfd\xbe\xc1\x77\x41\x47\xcb\xc8\xde\xd8\xeb\x6f\xb3\x05\x4a\x8a\xec\x85\xd9\x4e\x82\x92\x8c\xbe\xe1\xdf\x5e\x9f\x75\x74\xc3\x2a\xa5\x0b\x6e\xb4\xf9\x47\x1f\xe2\x67\xe1\x39\x38\x37\x60\x9b\xca\x9a\xb1\xdb\xc4\xed\x46\xf3\x28\x75\xfd\xaf\x89\x5a\xdc\xdb\xa8\xe2\x8f\xdb\xf1\x4f\x15\x42\x53\x8a\x2f\xf8\xf9\x78\x67\xf9\x0a\x6e\xd0\x85\xc5\x72\xb2\xe3\xaf\xf1\x12\xaf\xe7\xf3\x43\x70\x6e\xe1\x8a\x9e\xe6\x83\xa9\x65\x6c\xd0\xd8\x59\x4d\x63\xe6\x49\x4f\x97\x71\xb1\x5a\xc2\x3d\x00\x00\xff\xff\x73\xbe\x8e\xc0\xc2\x00\x00\x00")

func blogTemplateConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_blogTemplateConfigToml,
		"blog/template/config.toml",
	)
}

func blogTemplateConfigToml() (*asset, error) {
	bytes, err := blogTemplateConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "blog/template/config.toml", size: 194, mode: os.FileMode(436), modTime: time.Unix(1521966860, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _blogTemplateFaviconIco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x7d\x68\x5b\x65\x18\xc5\x4f\xee\x6d\xda\xb5\x1b\x33\xb3\xb8\xb6\x58\x5d\xe7\x98\x94\x42\xd5\x3f\x74\x42\x3b\xd4\x62\x61\x9d\xd2\x8a\xd0\xd6\x2f\xb4\xa8\xb3\x5b\xe6\xcc\xc2\x1c\xb4\x93\xab\xf9\x68\xf7\x91\xac\xcd\x58\xb0\x59\x2c\x31\x53\x3b\xd6\x99\xb8\x39\x24\x8d\x32\x37\xc8\x36\x2c\x41\x62\x35\x19\x6d\x26\x0e\xc9\xb2\x25\x5d\xee\xd2\xae\x95\x38\xb6\x56\x77\x24\x09\x17\x86\x50\xa9\x07\x1e\x1e\x78\xe1\x77\xde\xf7\xe5\x79\x0e\xa0\x82\x0a\x1a\x4d\xb6\x57\x61\x4b\x01\xb0\x12\x40\x35\x00\x0d\x80\x2a\xe4\xcf\x15\xcd\x94\xe4\x6b\x21\x15\x0a\x58\x52\xb3\x14\xaf\x97\x08\x78\x09\x40\x45\x0e\xff\x1f\x6a\x2c\x13\xb5\xe6\xa7\x1e\xa0\xf9\xb1\xe2\x4c\xe7\x43\x42\xf8\x85\xfb\xe0\x59\x5d\x80\x9d\x02\xd0\x04\xa0\x12\x80\x7a\x21\xf6\xf1\xe5\xa8\xdf\xfb\xc4\xf2\xf4\xdb\x9d\x9b\xb9\x5b\xea\xe6\xe7\xbd\x5d\xfc\x52\xda\xcc\x2f\xb6\x6c\xe0\xc1\x67\x4b\x67\xdf\xaf\x15\x2e\xb4\xde\x8f\x93\x6b\x0b\xd1\xa5\x06\x5a\x44\x15\x1e\xbc\x9b\xb7\xaf\xc7\xa9\x6f\x5a\x0b\xd9\xfe\x62\x1b\x77\x99\x76\xf3\x63\xe7\x20\x5d\x43\xc3\x3c\xea\x3d\x41\xdf\xf1\x61\x06\x8e\xda\x39\xea\x36\xf2\x7c\xdf\x9b\x74\xb6\x54\xc8\x95\x6a\x34\x2a\xec\x73\x65\xd8\x74\x49\x0f\xa6\x2d\xcb\x38\xd2\x51\xc1\x03\xba\x57\x69\x39\x30\xc0\x7e\x9b\x8d\x0e\x87\x83\x2e\xf7\x61\x1e\x39\xe6\xe1\xd7\x23\xa7\x38\xfa\x53\x98\xda\x37\xda\x5d\x0a\xab\x11\xb0\xc2\xdb\x8c\x89\x79\x47\x31\x63\x96\xb5\xbc\x2a\x15\x30\xac\x55\xf3\x84\xe1\x2d\x9e\x1c\xf9\x9e\xc7\xbc\x5f\xd1\xe7\xf3\xd1\xef\xf7\xd3\xe3\xf1\xd0\xef\xff\x96\x6d\xed\x2f\x7f\xa6\xf0\x5b\x6b\xb0\xef\xa6\x05\x4c\x1e\xac\xe1\x6f\x86\x72\x26\x3e\x02\x13\x1f\x82\x17\xb7\x0b\x3c\x27\x3d\xcf\xe0\xd9\xb3\xfc\xf1\xe7\x08\xc7\xc6\xc6\x98\x4c\x26\x39\x3e\x3e\x7e\xa7\xa1\xa1\xa1\x33\xcb\x3e\xb2\x02\x0f\x47\xf5\x90\x6f\xbb\xab\x78\xd9\xb2\x86\xd7\x7b\xc1\x6b\x26\x30\x61\x40\xce\xe7\x77\x3d\x18\xdc\x51\xcd\xc8\xf9\x33\xfc\x35\x96\x60\x38\x1c\x66\x47\x47\x87\x5b\x99\xab\xab\x11\x7d\xf3\x83\xf7\x72\xd2\xb1\x8e\x69\xcb\x12\xa6\x7b\xc1\xa4\x51\x60\xca\x9c\xed\xf9\x8a\x77\x81\xa1\xf7\x56\xf2\xe2\xe9\xe3\x9c\xca\xcc\x73\xeb\xbb\xdb\x86\x95\x39\x86\xb6\x09\x1e\xf9\xd3\x3a\x4e\xd9\x2b\x99\xb1\x82\x09\x4b\x39\xaf\xba\x37\x32\xd9\x53\x92\xf3\x98\x34\xe5\x3d\x12\x12\x18\xd5\x97\xf0\x3b\x43\xeb\xdc\xa3\xb5\xb5\xbb\x94\xbf\x4f\xae\x13\xd6\x47\xbb\x2b\xe2\x73\x4e\x91\x57\x24\xf0\xd2\xa1\x26\xde\x38\xbd\x83\xb2\xf7\x35\x5e\xdb\x57\x4a\xd9\x04\xa6\x7a\xf2\x1e\x72\x0f\x18\xdb\x0e\xbe\x52\x85\xc3\x77\xef\xe5\x0f\x2d\x58\x1d\xdd\x84\xc0\xac\x0d\x94\xad\x1a\xc6\xdd\xcd\xbc\x71\x66\x27\xa7\x7d\x9d\x4c\xd9\xd7\xe4\xb8\xa9\xbd\xe0\xb4\x19\x74\x6d\xc4\x68\x59\x31\x56\xfd\x7b\xf7\x22\x1b\xb0\xf4\x97\x77\x30\x90\x7d\xf3\xcc\xfe\x42\x5e\xf9\xe4\x19\x5e\xf7\xeb\x98\x74\x3e\xc9\x59\x2b\xf8\xc7\x1e\xd0\x50\x8f\xa1\x65\x42\x2e\x5e\x0b\x2a\xd4\x86\xe6\xb8\x04\x39\x63\x53\x33\x65\x2b\xe7\x9f\xfd\x02\x6f\x5a\x41\xa9\x0e\xae\x02\xa0\x78\x11\x11\xc2\x50\x13\xaa\x2f\xe8\x10\xfc\x7b\x00\xbc\xdd\x0f\x7e\x50\x8f\x43\x22\x50\xb4\x18\x56\xd1\xb9\x56\x94\x4e\x68\x31\xd8\x5d\x07\xa3\xf8\x1f\xf7\x92\xc0\x2d\xc3\x1e\xce\x14\x05\x53\x31\xd5\xdc\x74\x4c\x35\x91\x08\xa8\x8e\x44\x8c\xe2\xfe\x88\x51\xd4\x85\x20\xf6\x5d\x46\x91\x8d\x46\x11\x42\xa0\x08\x88\xdd\x03\xdc\x5a\x05\xfc\xf5\x34\x70\xc7\x00\xfc\x13\x00\x00\xff\xff\x45\x44\x84\x4f\x7e\x04\x00\x00")

func blogTemplateFaviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_blogTemplateFaviconIco,
		"blog/template/favicon.ico",
	)
}

func blogTemplateFaviconIco() (*asset, error) {
	bytes, err := blogTemplateFaviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "blog/template/favicon.ico", size: 1150, mode: os.FileMode(436), modTime: time.Unix(1521964427, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _blogTemplateLayoutHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\xca\x48\x4d\x4c\x49\x2d\x52\x52\xd0\xab\xad\xe5\xb2\xc9\x30\xb4\xab\xae\xd6\x2b\xc9\x2c\xc9\x49\xad\xad\xb5\xd1\xcf\x30\xb4\xe3\xaa\xae\xd6\x4b\xca\x4f\xa9\xac\xad\xe5\x42\xd6\x95\x96\x9f\x5f\x02\xd5\x05\x08\x00\x00\xff\xff\xd3\x36\x34\x46\x4d\x00\x00\x00")

func blogTemplateLayoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_blogTemplateLayoutHtml,
		"blog/template/layout.html",
	)
}

func blogTemplateLayoutHtml() (*asset, error) {
	bytes, err := blogTemplateLayoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "blog/template/layout.html", size: 77, mode: os.FileMode(436), modTime: time.Unix(1521964908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _blogTemplateMainCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x4d\x6f\xdb\x3c\x12\xbe\xfb\x57\xcc\x3a\x28\xd0\x06\x92\x2b\x3b\x56\x93\xca\x40\xb0\x45\x0f\xbb\x87\xdd\x45\xb1\xdb\x63\x2f\xb4\x48\x59\x44\x29\x52\x4b\x51\xb1\xdd\xc2\xff\x7d\xc1\x2f\x49\x94\x25\x27\xfb\xde\x5e\x07\x48\x62\xce\x33\xc3\x21\x39\xf3\xcc\x90\xf7\xf0\x7b\x01\x00\x50\x21\x79\xa0\x3c\x83\x64\x67\xbe\xd6\x08\x63\xca\x0f\xdd\xf7\x63\x49\x15\x89\x9b\x1a\xe5\x24\x03\xca\x4b\x22\xa9\xb2\x92\xbd\x38\xc5\x0d\xfd\x65\xc0\x7b\x21\x31\x91\xf1\x5e\x9c\x76\x8b\xcb\x62\x2f\xf0\xd9\x59\x2f\x04\x57\x1a\x45\x32\xd8\x24\xf5\xc9\x6a\xe6\x82\x09\x99\xc1\xdd\x83\xf9\x38\x6b\x28\xff\x79\x90\xa2\xe5\x38\x76\x62\x33\xf3\xae\xb7\x52\xa0\x8a\xb2\x73\x06\xcb\x6f\xdf\xe1\x3f\x44\xd2\x62\x19\xc1\xdf\x88\x90\x07\x8a\x22\x58\x7e\xa7\x15\x69\xe0\x5f\xe4\x08\xff\x16\x15\xe2\xcb\x08\x1a\x8d\xd1\xee\x94\xeb\x08\xca\x4d\x04\xe5\x43\x04\xe5\x36\x82\x32\x8d\xa0\xfc\x34\x5a\xfe\x3a\xa9\x4f\x7e\xcd\xde\x3f\x94\x6f\xd7\xdb\xcd\x9c\x0b\x88\x37\xcb\x08\xfe\x4e\xd8\x0b\x51\x34\x47\x11\x7c\x91\x14\xb1\x08\x1a\xc4\x9b\x78\x30\x39\xfc\x0e\x76\x61\xb5\x91\xa4\xda\xc1\x65\x51\x6e\x42\xc9\x7a\x95\x7a\xc9\xc3\x58\xd2\xe9\x6c\xc7\x92\xb5\x97\xa4\x63\x49\xe2\x25\x9f\x42\x49\xb2\xfa\xdc\x79\x70\x73\x53\x62\x25\xea\xce\xd0\x70\x7c\x2f\x94\x12\x95\xb6\x64\xfc\x5a\xd8\xb5\x4c\x68\xa6\x9d\x66\x17\x20\x56\x73\x5d\x9f\xa0\x11\x8c\x62\xb8\xc3\xe6\xa3\x8d\xd0\xea\xd0\x59\x39\xc5\x47\x8a\x55\xa9\xcf\x25\x79\xa7\x85\x0a\xed\x19\x71\x62\x67\x2c\x17\x8c\xa1\xba\x21\x19\xf8\xff\xec\x5c\x06\x1a\x33\x74\x16\xad\xca\xa0\xa0\x27\x82\x5d\x2c\x8f\x4c\xe2\x08\x54\xe9\x6c\x2a\x72\x52\x31\x62\xf4\xc0\x33\x60\xa4\x70\x31\xfe\x42\xa4\x3e\x5b\xe6\x25\x4a\xd4\x9d\x33\x2b\xeb\x06\xc1\xf0\x0c\xca\x84\xfc\x33\x28\xa9\x7f\x95\xd1\x6b\x08\x1c\xac\x64\x66\x3f\x50\x04\x28\x2b\xc5\x0b\x91\x0e\xed\xe3\x72\xbb\x79\xda\xe7\xc8\x40\x86\xde\x63\x92\x0b\x89\x14\x15\x3c\x03\x2e\x38\x31\x80\xc0\xc0\x15\xac\xe5\x98\x48\x46\x2d\xb6\x8e\xa0\x96\x24\x02\x46\x23\xc0\x2a\x02\x8c\x23\xd8\x33\x91\xff\xfc\x6f\x2b\x14\x81\xda\x19\xd1\xf0\xb8\x24\xf4\x50\x2a\x7d\xc6\xdb\x74\x77\x75\xf2\xc9\xe0\xe4\xaf\x62\x26\x75\x31\xd3\xb2\x08\x04\x73\x46\xc7\xb4\xd3\xb1\x12\x24\x36\x35\x37\x69\x6d\xb8\x05\xab\x30\xd2\x3a\xbb\x83\x34\x6d\xd4\x99\x69\xb6\x52\x88\xd1\xdc\x28\xe1\x50\x49\x1f\xf0\x64\x64\x5b\xef\x0d\x87\xf5\x0b\x1f\x7b\x68\x9d\x4a\x3d\x9b\xf9\x33\xb4\x5b\x3e\x88\x4f\x3b\x4b\xda\x1f\x2d\x31\x9f\x20\x16\x9f\x74\x28\x06\x3c\xb4\x4a\x49\x35\x26\xa2\x87\x27\xfd\xa3\xdd\x5a\xe5\xb4\xf3\xc8\x4b\x1f\x1f\x1f\x47\xdc\x9d\x5a\x2e\x73\xf0\x2c\xdb\x93\x42\xc8\x5e\x8d\x2b\xc2\x55\x06\xcb\x1f\x9b\x64\xbd\x85\x1f\x9b\x24\xf9\xbc\xd4\xe8\x5c\x60\x32\xe4\x6d\x4f\x77\xdf\x24\x3a\x54\x48\xa1\x6f\x52\x44\xf0\x4f\xc2\x99\xfe\x23\x38\xca\x45\x04\xcb\x2f\x1c\x23\x46\xf4\x77\xb1\x8c\x60\xf9\x8f\x36\xa7\x18\xc1\x57\xc1\x1b\xc1\x88\x1e\xf9\x2a\x5a\x49\x89\xd4\xdc\xbc\x8c\xa0\x12\x5c\x98\x6a\x62\x5d\xfe\x78\x1f\x4e\x65\xf5\x50\x73\x65\xd8\xcf\xd7\xeb\xc3\xfd\xc7\x99\xca\x71\x57\x3c\xe9\x1f\x13\xd3\xf2\x4f\xb8\xa2\x01\x59\x7f\xf6\xf1\xf1\xf1\x3e\x4c\x3c\x2e\x64\x85\x58\xa7\x12\x94\xe9\x5a\x92\xf8\x28\x51\x3d\x57\x59\xbb\xfd\x79\x85\x82\x06\xb1\x2c\x11\xa6\x6d\x73\xdd\x25\x7c\xb2\x59\xb9\x62\xda\xab\xb8\x9f\xca\xf3\xdb\xdb\xe6\xee\x53\x67\xbc\x0e\x6d\xfc\x3e\xe3\x42\xbd\xaf\x25\xf9\x00\xcf\x30\x88\xd1\x00\xcb\x85\x5d\xf1\x65\xb1\xc2\x2c\x2e\x85\xa4\xbf\x04\x57\x88\xc1\x33\x8c\xb3\x3f\x28\x6b\x36\x44\x02\xbb\xd7\x4e\x07\x7d\xcf\x90\xaa\xac\x76\x53\x23\xee\x74\x45\x8d\x72\xaa\xce\x19\xac\xe1\x2f\xb4\xaa\x85\x54\x88\x2b\xe3\xd5\x0b\x91\x0d\x19\x37\x1d\x26\xd9\x6d\x63\x74\x59\x60\xfa\xe2\x50\x9a\x89\x03\x85\x20\xa2\xba\xa6\xc7\xf4\x3c\x5d\xa3\xf3\x4a\x18\x84\xfc\xfc\x78\x83\xa0\x1f\x3d\x43\xaf\x1a\x8a\xc9\x1e\xc9\xd7\x8b\xd5\x7c\xa4\xf4\x9b\xa9\xcf\xbe\x28\x0a\x4f\x80\xdd\x36\xae\xbb\xbe\xf0\x8a\x03\xed\x9e\x78\x2f\xee\xb3\x82\xca\x46\xc5\x79\x49\xd9\xd4\x91\xf6\xed\xc8\xaa\x46\x07\x12\xef\x25\x41\x3f\x3b\xf6\xf6\x03\xb1\x25\xc3\x0c\x10\x3b\xa2\x73\x63\xe0\x5c\xc4\xb7\x34\x28\xd7\x2e\x64\x80\x5e\x04\x35\x95\x79\x65\xda\x01\x43\xf0\xb3\xed\x43\x87\xca\x09\x57\x61\x05\x76\x38\x2b\x18\x20\xa5\x4e\xa2\x09\xa0\x19\xb7\xeb\x92\xa4\x21\xf2\xc5\x39\xd6\x4c\x25\x82\x4b\x9a\x95\x61\x8b\x9b\xb0\x78\x3a\x63\x5c\xb5\x88\x60\x34\x8c\x8a\x7e\x19\x98\x36\x35\x43\xe7\xcc\xf6\x5a\xbb\x51\x5d\x59\xee\xae\x1b\x85\x64\x62\xa2\xa1\xc5\x9c\x11\x24\xf5\x45\x42\x95\xd3\x49\xec\x37\xa6\x60\x02\xa9\x61\x8f\xe6\x34\xfb\x01\xdd\xf0\x14\x4c\x1c\x33\x28\x29\xc6\x84\xef\xfa\x0d\xed\x45\x84\x31\x5a\x37\xb4\x99\xc8\x1b\x4f\x25\xf3\x6d\xe1\x5c\x7f\xec\x8a\xfa\x26\x7d\xf7\x26\x22\xb2\x0d\x82\x41\x0f\x32\x62\xd4\x9d\x5c\x16\x98\x75\x95\xbb\xd5\x11\x13\xeb\x20\x50\x19\x60\x16\xbb\x11\x87\x1a\xec\x92\x87\x52\x9e\x4b\x52\x99\x63\x09\xe1\x62\xc6\xa8\x18\xa3\x9e\x81\xd1\x79\xa3\x21\xbc\x9d\x31\xda\x8e\x51\xb7\x8d\x86\xf0\x55\xef\xf8\x4c\x23\xe3\xa4\xef\x7b\xe0\x07\x58\x82\x69\x69\x56\xe2\xad\xca\x62\x42\xb9\x7d\xab\x72\x3b\xa1\x8c\x59\xcc\xdb\x6a\xef\xfa\x7f\xac\xfe\x1f\xe7\x57\xd6\xc6\x5f\x2b\x82\x29\x82\x5a\x52\xee\x0f\xd6\x70\x95\xfe\x1e\xf5\xff\x82\xbf\xcb\x07\xa9\xa9\x8b\x6a\x50\x84\xb4\xf4\x62\x7e\x87\xb7\x82\xd9\x0b\xc4\x84\xf6\x65\x71\x57\x21\xea\xab\xdd\xaf\x98\x72\x4c\x4e\x19\xac\x5d\x5e\x50\xde\xdf\x0c\x92\xbe\xb5\xed\x6e\x73\xe9\x55\xd9\xb1\xc1\x9e\x4c\x65\xc0\xb6\x2b\x0c\x7e\x5c\x5a\xd3\x5b\x57\x30\xef\x90\xbe\x9d\xb1\x51\x87\xee\xd2\xd2\x35\x26\x15\xe1\x6d\x77\x71\x69\xdc\xdd\x20\x56\xe7\x9a\x0c\xdb\x8e\x57\x1e\x41\xa6\x19\x65\xa2\xb9\xf1\x2f\x06\x7e\xe2\x2e\xca\xaf\x58\x6b\x54\xb8\x6e\x94\xe3\x4d\x57\x8e\x9d\xc9\xf9\x32\xe8\x09\x65\xb8\x76\x46\x01\x8d\x59\xdb\x5c\x6e\x82\x2b\xc6\xe0\xb1\x65\xaa\x44\x85\x9b\x52\x9f\x06\xd7\x9f\xd9\xab\x67\x3f\x7d\x10\x6d\x53\xbb\x56\xa4\x9b\x74\x6b\x74\xf6\x88\xf3\x0e\x3a\x3a\x95\xa9\x67\x99\xe0\xca\xd3\x07\xcc\xf5\xe3\x49\x3f\x7c\x74\x01\xba\x17\x0c\x0f\xe7\xac\xaf\x67\xed\x84\x11\x0c\x03\xe9\x8f\xbe\x05\xb9\x74\x6e\x72\x49\x08\x07\xc4\x31\xbc\xd7\x19\xe3\x9f\x25\xea\xd3\x07\x37\xd8\x27\xcc\x53\x92\xe8\x61\xdf\x80\x75\xef\x6a\x30\xf7\xb6\x66\x13\x7c\x98\xa4\x13\xa5\xa5\x43\x4f\x24\xd7\x7a\x64\x6a\xc8\x2d\x3e\x0f\x4c\xe7\x90\x81\xed\x8e\x8e\x42\xe2\xa1\xc2\x8d\x30\x9d\xcb\x7b\xa7\x18\x1c\xfe\x2d\xb7\x2f\xd3\xdc\x38\x5c\xf5\xf4\x34\x97\xff\x05\x00\x00\xff\xff\xe9\x1a\xf2\xf6\xf6\x14\x00\x00")

func blogTemplateMainCssBytes() ([]byte, error) {
	return bindataRead(
		_blogTemplateMainCss,
		"blog/template/main.css",
	)
}

func blogTemplateMainCss() (*asset, error) {
	bytes, err := blogTemplateMainCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "blog/template/main.css", size: 5366, mode: os.FileMode(436), modTime: time.Unix(1522012000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _blogTemplatePartialsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\xcf\x8e\xdb\x20\x10\xc6\xef\x7e\x0a\x96\xbb\x8d\x7a\xad\x30\xd2\xaa\xdb\x6b\x1b\xa9\x7b\xe9\x11\x9b\x89\x8d\x16\x83\x05\xe3\x6c\x22\xd7\xa7\x3e\x56\x1f\xa7\x2f\x52\xe1\x7f\xeb\x64\x37\xab\x36\x6a\x2e\x81\x91\xbf\x1f\xc3\x37\x1f\x7d\xaf\x60\xaf\x2d\x10\x5a\x83\x54\xe0\xe9\x30\x24\xfc\xee\xe1\xeb\xa7\xc7\xef\xbb\xcf\xa4\xc6\xc6\x88\x84\x2f\x7f\x20\x95\x48\x38\x6a\x34\x20\xfa\x3e\x1b\x17\xc3\xc0\xd9\x54\x49\x78\x03\x28\x89\x95\x0d\xe4\xf4\xa0\xe1\xb9\x75\x1e\x29\x29\x9d\x45\xb0\x98\xd3\x67\xad\xb0\xce\x15\x1c\x74\x09\xe9\xb8\xa1\x4c\x24\xdc\x68\xfb\x44\xf0\xd4\x42\x4e\x11\x8e\xc8\xca\x10\x28\xf1\x60\x72\x1a\xf0\x64\x20\xd4\x00\x48\x49\xed\x61\x9f\xd3\xbe\xcf\x82\x46\xc8\x3a\x6f\x5a\x0f\x7b\x7d\x1c\x06\xd6\x48\x6d\xb3\x28\x12\x09\x67\x73\x8b\x85\x53\x27\x91\x70\xa5\x0f\xa4\x34\x32\x84\x9c\x16\xd2\x5a\xf0\x54\x24\x84\x10\xc2\x5b\x11\xbc\x2c\x9f\x6a\xd9\x90\x1f\xa4\x30\xae\xe2\xac\x8d\x72\xa5\x0f\x22\xe1\x9d\x59\x54\x0d\xd8\x8e\x58\x97\xb6\x5e\x5b\x1c\xc5\xdc\x68\xc1\xe5\x3b\xed\x68\xab\xe0\x08\x81\xb5\x2e\x60\x60\xca\x95\x21\xfd\x90\x45\x03\xa9\xd8\xc5\x12\x67\x52\x70\x66\xf4\x0d\x30\x94\x55\x98\x51\x8f\xb2\xfa\x37\x92\x2c\x5c\x87\xb3\xf8\x3e\xae\x5f\xd4\x9c\x75\x66\x36\x4b\xab\x9c\x46\x3f\x17\x9f\x96\x9a\xf4\xa8\x4b\x03\x54\x24\x7d\x0f\x56\x0d\x43\x92\xbc\x04\x67\xef\x1c\x4e\xc1\x19\x35\x93\x89\x9b\x25\x67\xf3\x38\xd8\x94\xa3\x37\x10\xca\x95\xf1\x72\x0b\xa3\xef\xbd\xb4\x15\x90\x6c\xde\xff\xfe\xf9\x8b\x6c\x6f\xd7\x79\x33\x0c\x74\x8c\xa0\xac\x62\x00\xa5\x98\x75\x13\xf9\xed\x13\x62\x17\x6b\x97\xed\xa4\x18\xd7\x01\xbd\xb3\x95\xd8\x75\x85\xd1\xa1\x06\xf5\x91\xb3\xb9\x44\xfa\x3e\x33\xce\x56\x4a\x62\x0c\x7a\xe1\x5f\xab\xe2\x24\xce\x04\x08\x4d\x6b\x24\x6e\x6e\x45\x62\x9b\xe1\x8a\xfe\xbe\xc3\xda\xf9\xf3\x23\xe5\x58\xbb\x22\xd8\x79\x38\x6c\x3e\xdf\xfa\xd2\x7a\x38\x6c\xcc\x19\xb7\xeb\x23\x95\xe2\x4d\xdc\x17\x38\xe2\x15\x9c\x85\x23\x6e\x70\xe3\x76\x83\x9b\x67\xdc\x2e\xde\x67\xd1\xe0\xab\xee\x1b\x1d\x70\x75\x3f\x06\x6e\x69\xe4\x72\xd8\xe3\x07\x53\xaa\x5f\x7e\xab\xdb\xf1\xf8\x2b\xed\x6e\x52\x71\xe5\xce\x5b\xd2\x83\x44\xf8\xab\x41\xff\x8f\x61\x8f\x8c\xbb\x34\x5d\x41\xdf\x4e\xd6\xb5\x41\x9f\xc3\xb2\x30\x57\x27\x35\x49\xd3\x0b\xc2\xd9\xfc\xd8\xd6\xa3\x77\x92\xdf\xca\x0a\x2e\x9e\xe8\x92\x24\x59\x5d\x58\x60\xbb\xa6\x00\x3f\x0c\xc4\xed\x47\x47\x64\xc0\xb5\xb6\x9e\x7e\x63\x10\x57\xce\x76\x2a\x37\xa6\xf0\x15\x6b\xbe\xf7\x9f\x00\x00\x00\xff\xff\x1e\xa2\xce\x78\xce\x06\x00\x00")

func blogTemplatePartialsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_blogTemplatePartialsHtml,
		"blog/template/partials.html",
	)
}

func blogTemplatePartialsHtml() (*asset, error) {
	bytes, err := blogTemplatePartialsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "blog/template/partials.html", size: 1742, mode: os.FileMode(436), modTime: time.Unix(1522026989, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _blogTemplatePostsDocsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\xca\x48\x4d\x4c\x49\x2d\x52\x52\xd0\xab\xad\xe5\xb2\xc9\x30\xb4\x73\xcc\xc9\x51\x70\xca\xc9\x4f\x57\x08\xc8\x2f\x2e\x29\xb6\xd1\xcf\x30\xb4\xe3\x42\x56\x9f\x92\x9f\x9c\x93\x59\x5c\xa2\xa4\xa0\x97\x92\x9f\x5c\x5c\x5b\x8b\x22\x59\x90\x98\x9e\x9a\x96\x9f\x5f\x02\x36\x10\xc4\x41\x93\x87\xcb\xd5\xd6\x02\x02\x00\x00\xff\xff\xa5\xd3\x6c\xda\x84\x00\x00\x00")

func blogTemplatePostsDocsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_blogTemplatePostsDocsHtml,
		"blog/template/posts/docs.html",
	)
}

func blogTemplatePostsDocsHtml() (*asset, error) {
	bytes, err := blogTemplatePostsDocsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "blog/template/posts/docs.html", size: 132, mode: os.FileMode(436), modTime: time.Unix(1522004962, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _blogTemplatePostsLayoutHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\xca\x48\x4d\x4c\x49\x2d\x52\x52\xd0\xab\xad\xe5\xb2\xc9\x30\xb4\xab\xae\xd6\x2b\xc9\x2c\xc9\x49\xad\xad\xb5\xd1\xcf\x30\xb4\xe3\x42\x56\x9b\x92\x9f\x9c\x94\x9f\x52\x09\x51\x8c\x2c\x91\x96\x9f\x5f\x02\x35\x04\x10\x00\x00\xff\xff\x2d\x68\xd0\x94\x5c\x00\x00\x00")

func blogTemplatePostsLayoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_blogTemplatePostsLayoutHtml,
		"blog/template/posts/layout.html",
	)
}

func blogTemplatePostsLayoutHtml() (*asset, error) {
	bytes, err := blogTemplatePostsLayoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "blog/template/posts/layout.html", size: 92, mode: os.FileMode(436), modTime: time.Unix(1521967333, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _blogTemplatePostsTagHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\xca\x48\x4d\x4c\x49\x2d\x52\x52\xd0\xab\xad\xe5\xb2\xc9\x30\xb4\xab\xae\xd6\x2b\x49\x4c\xaf\xad\x55\x70\xca\xc9\x4f\x57\x08\xc8\x2f\x2e\x29\xb6\xd1\xcf\x30\xb4\xe3\x42\xd6\x94\x92\x9f\x9c\x93\x59\x5c\xa2\xa4\xa0\x97\x92\x9f\x5c\x5c\x5b\x8b\x22\x59\x90\x98\x9e\x9a\x96\x9f\x5f\x02\x36\x15\xc4\x41\x93\x87\xca\xd5\xd6\x02\x02\x00\x00\xff\xff\xd5\xeb\x42\xbc\x87\x00\x00\x00")

func blogTemplatePostsTagHtmlBytes() ([]byte, error) {
	return bindataRead(
		_blogTemplatePostsTagHtml,
		"blog/template/posts/tag.html",
	)
}

func blogTemplatePostsTagHtml() (*asset, error) {
	bytes, err := blogTemplatePostsTagHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "blog/template/posts/tag.html", size: 135, mode: os.FileMode(436), modTime: time.Unix(1522004995, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _blogTemplatePostsTagsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcd\xb1\xad\xc2\x30\x14\x85\xe1\xde\x53\x5c\xb9\x7a\xaf\x71\x94\xde\x78\x0a\x16\xb8\x22\x37\x76\x11\x6c\xe4\x38\xd5\xd1\xa9\x18\x8b\x71\x58\x04\x45\xa2\xa0\xff\xf5\x7f\xc0\xb0\xfb\x63\xd3\x61\xe2\x8b\xe9\x62\xdd\x4b\x20\x5d\x2c\x73\xba\x6a\xde\xe3\x54\xe6\xe4\x80\xae\x35\x9b\x84\xa1\x79\x27\xdd\xfb\xf9\x92\xa8\x52\xba\xad\x17\x0f\x84\xa3\x6f\xa4\x4f\xc0\x19\x90\xf2\x07\x84\x5b\x3b\xea\x20\xff\xe3\xa4\xe7\xc0\xea\x42\xba\x5f\x6e\x6d\x6d\x7c\xb9\x4f\x00\x00\x00\xff\xff\x3a\xf3\xb1\xd5\x86\x00\x00\x00")

func blogTemplatePostsTagsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_blogTemplatePostsTagsHtml,
		"blog/template/posts/tags.html",
	)
}

func blogTemplatePostsTagsHtml() (*asset, error) {
	bytes, err := blogTemplatePostsTagsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "blog/template/posts/tags.html", size: 134, mode: os.FileMode(436), modTime: time.Unix(1522004422, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _minimalTemplateIndexMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xf2\x48\xcd\xc9\xc9\x57\xd0\x0a\xcf\x2f\xca\x49\xd1\x52\xe4\x02\x04\x00\x00\xff\xff\xac\xd1\x81\x2d\x0f\x00\x00\x00")

func minimalTemplateIndexMdBytes() ([]byte, error) {
	return bindataRead(
		_minimalTemplateIndexMd,
		"minimal/template/index.md",
	)
}

func minimalTemplateIndexMd() (*asset, error) {
	bytes, err := minimalTemplateIndexMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "minimal/template/index.md", size: 15, mode: os.FileMode(436), modTime: time.Unix(1522006558, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _minimalTemplateLayoutHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x51\x4c\xc9\x4f\x2e\xa9\x2c\x48\x55\xc8\x28\xc9\xcd\xb1\xe3\xb2\xc9\x48\x4d\x4c\xb1\xb3\x29\xc9\x2c\xc9\x49\xb5\xab\xae\xd6\x03\x33\x6a\x6b\x6d\xf4\x21\x22\x36\xfa\x60\x79\x2e\x9b\xa4\xfc\x94\x4a\x90\x3c\x88\x06\x49\x83\xf9\x5c\x80\x00\x00\x00\xff\xff\xf7\x95\xf9\xaa\x4e\x00\x00\x00")

func minimalTemplateLayoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_minimalTemplateLayoutHtml,
		"minimal/template/layout.html",
	)
}

func minimalTemplateLayoutHtml() (*asset, error) {
	bytes, err := minimalTemplateLayoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "minimal/template/layout.html", size: 78, mode: os.FileMode(436), modTime: time.Unix(1520106920, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"blog/template/config.toml": blogTemplateConfigToml,
	"blog/template/favicon.ico": blogTemplateFaviconIco,
	"blog/template/layout.html": blogTemplateLayoutHtml,
	"blog/template/main.css": blogTemplateMainCss,
	"blog/template/partials.html": blogTemplatePartialsHtml,
	"blog/template/posts/docs.html": blogTemplatePostsDocsHtml,
	"blog/template/posts/layout.html": blogTemplatePostsLayoutHtml,
	"blog/template/posts/tag.html": blogTemplatePostsTagHtml,
	"blog/template/posts/tags.html": blogTemplatePostsTagsHtml,
	"minimal/template/index.md": minimalTemplateIndexMd,
	"minimal/template/layout.html": minimalTemplateLayoutHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"blog": &bintree{nil, map[string]*bintree{
		"template": &bintree{nil, map[string]*bintree{
			"config.toml": &bintree{blogTemplateConfigToml, map[string]*bintree{}},
			"favicon.ico": &bintree{blogTemplateFaviconIco, map[string]*bintree{}},
			"layout.html": &bintree{blogTemplateLayoutHtml, map[string]*bintree{}},
			"main.css": &bintree{blogTemplateMainCss, map[string]*bintree{}},
			"partials.html": &bintree{blogTemplatePartialsHtml, map[string]*bintree{}},
			"posts": &bintree{nil, map[string]*bintree{
				"docs.html": &bintree{blogTemplatePostsDocsHtml, map[string]*bintree{}},
				"layout.html": &bintree{blogTemplatePostsLayoutHtml, map[string]*bintree{}},
				"tag.html": &bintree{blogTemplatePostsTagHtml, map[string]*bintree{}},
				"tags.html": &bintree{blogTemplatePostsTagsHtml, map[string]*bintree{}},
			}},
		}},
	}},
	"minimal": &bintree{nil, map[string]*bintree{
		"template": &bintree{nil, map[string]*bintree{
			"index.md": &bintree{minimalTemplateIndexMd, map[string]*bintree{}},
			"layout.html": &bintree{minimalTemplateLayoutHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

