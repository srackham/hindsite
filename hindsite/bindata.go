// Code generated by go-bindata.
// sources:
// ../examples/builtin/blog/template/config.toml
// ../examples/builtin/blog/template/favicon.ico
// ../examples/builtin/blog/template/layout.html
// ../examples/builtin/blog/template/main.css
// ../examples/builtin/blog/template/newsletters/config.toml
// ../examples/builtin/blog/template/newsletters/docs.html
// ../examples/builtin/blog/template/newsletters/layout.html
// ../examples/builtin/blog/template/partials.html
// ../examples/builtin/blog/template/posts/docs.html
// ../examples/builtin/blog/template/posts/layout.html
// ../examples/builtin/blog/template/posts/tags.html
// ../examples/builtin/minimal/template/index.md
// ../examples/builtin/minimal/template/layout.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _blogTemplateConfigToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xce\x41\x4b\xf4\x40\x0c\xc6\xf1\xfb\x7c\x8a\xd0\x5e\xdf\xed\xec\xf6\xf0\xde\x3c\x78\x15\xf1\x20\x78\x10\x11\x99\xed\x64\xdb\xe0\x4c\x52\x92\x54\xab\xec\x87\x97\x16\xbd\xfe\x7f\x24\x3c\x2d\xcc\x8a\x33\x72\xc6\x0c\x2e\x60\x5f\xec\x13\x1a\x19\x66\x50\x11\x3f\x28\x96\xe4\xf4\x81\xf0\xf4\x78\x6f\x5d\x68\x17\x2d\xb3\xe2\x85\x56\xb8\x81\x26\x9e\x8b\x8c\x4d\x08\x2d\xae\x43\x59\x32\x6e\x6d\x10\xbe\xd0\xd8\x69\x5d\xae\x35\x11\xc7\x8d\x9d\x2a\x7e\x0b\xef\x7e\x5b\x51\x69\x48\xf1\x01\x3f\xdf\x9e\x45\xdf\x9b\xd0\xda\x24\xea\x39\xf9\xee\x7d\x3c\xc5\xfe\x78\xfc\xdf\x84\x30\x49\xc5\x39\x8d\x7b\x26\xce\xb8\xa2\xc5\x59\xcc\x2d\x66\x19\xec\x70\xea\x26\xaf\xa5\x09\x45\x78\xfc\xbb\xbe\x4b\x0c\xfd\x3f\xf8\x7d\xf0\xb2\x18\xea\x6b\x38\x27\x66\xd4\x8d\x27\xe2\x6c\xe4\x08\x57\xd8\xa7\xff\x04\x00\x00\xff\xff\x10\x41\xe1\xe0\xfe\x00\x00\x00")

func blogTemplateConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_blogTemplateConfigToml,
		"blog/template/config.toml",
	)
}

func blogTemplateConfigToml() (*asset, error) {
	bytes, err := blogTemplateConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "blog/template/config.toml", size: 254, mode: os.FileMode(436), modTime: time.Unix(1522287118, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _blogTemplateFaviconIco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x7d\x68\x5b\x65\x18\xc5\x4f\xee\x6d\xda\xb5\x1b\x33\xb3\xb8\xb6\x58\x5d\xe7\x98\x94\x42\xd5\x3f\x74\x42\x3b\xd4\x62\x61\x9d\xd2\x8a\xd0\xd6\x2f\xb4\xa8\xb3\x5b\xe6\xcc\xc2\x1c\xb4\x93\xab\xf9\x68\xf7\x91\xac\xcd\x58\xb0\x59\x2c\x31\x53\x3b\xd6\x99\xb8\x39\x24\x8d\x32\x37\xc8\x36\x2c\x41\x62\x35\x19\x6d\x26\x0e\xc9\xb2\x25\x5d\xee\xd2\xae\x95\x38\xb6\x56\x77\x24\x09\x17\x86\x50\xa9\x07\x1e\x1e\x78\xe1\x77\xde\xf7\xe5\x79\x0e\xa0\x82\x0a\x1a\x4d\xb6\x57\x61\x4b\x01\xb0\x12\x40\x35\x00\x0d\x80\x2a\xe4\xcf\x15\xcd\x94\xe4\x6b\x21\x15\x0a\x58\x52\xb3\x14\xaf\x97\x08\x78\x09\x40\x45\x0e\xff\x1f\x6a\x2c\x13\xb5\xe6\xa7\x1e\xa0\xf9\xb1\xe2\x4c\xe7\x43\x42\xf8\x85\xfb\xe0\x59\x5d\x80\x9d\x02\xd0\x04\xa0\x12\x80\x7a\x21\xf6\xf1\xe5\xa8\xdf\xfb\xc4\xf2\xf4\xdb\x9d\x9b\xb9\x5b\xea\xe6\xe7\xbd\x5d\xfc\x52\xda\xcc\x2f\xb6\x6c\xe0\xc1\x67\x4b\x67\xdf\xaf\x15\x2e\xb4\xde\x8f\x93\x6b\x0b\xd1\xa5\x06\x5a\x44\x15\x1e\xbc\x9b\xb7\xaf\xc7\xa9\x6f\x5a\x0b\xd9\xfe\x62\x1b\x77\x99\x76\xf3\x63\xe7\x20\x5d\x43\xc3\x3c\xea\x3d\x41\xdf\xf1\x61\x06\x8e\xda\x39\xea\x36\xf2\x7c\xdf\x9b\x74\xb6\x54\xc8\x95\x6a\x34\x2a\xec\x73\x65\xd8\x74\x49\x0f\xa6\x2d\xcb\x38\xd2\x51\xc1\x03\xba\x57\x69\x39\x30\xc0\x7e\x9b\x8d\x0e\x87\x83\x2e\xf7\x61\x1e\x39\xe6\xe1\xd7\x23\xa7\x38\xfa\x53\x98\xda\x37\xda\x5d\x0a\xab\x11\xb0\xc2\xdb\x8c\x89\x79\x47\x31\x63\x96\xb5\xbc\x2a\x15\x30\xac\x55\xf3\x84\xe1\x2d\x9e\x1c\xf9\x9e\xc7\xbc\x5f\xd1\xe7\xf3\xd1\xef\xf7\xd3\xe3\xf1\xd0\xef\xff\x96\x6d\xed\x2f\x7f\xa6\xf0\x5b\x6b\xb0\xef\xa6\x05\x4c\x1e\xac\xe1\x6f\x86\x72\x26\x3e\x02\x13\x1f\x82\x17\xb7\x0b\x3c\x27\x3d\xcf\xe0\xd9\xb3\xfc\xf1\xe7\x08\xc7\xc6\xc6\x98\x4c\x26\x39\x3e\x3e\x7e\xa7\xa1\xa1\xa1\x33\xcb\x3e\xb2\x02\x0f\x47\xf5\x90\x6f\xbb\xab\x78\xd9\xb2\x86\xd7\x7b\xc1\x6b\x26\x30\x61\x40\xce\xe7\x77\x3d\x18\xdc\x51\xcd\xc8\xf9\x33\xfc\x35\x96\x60\x38\x1c\x66\x47\x47\x87\x5b\x99\xab\xab\x11\x7d\xf3\x83\xf7\x72\xd2\xb1\x8e\x69\xcb\x12\xa6\x7b\xc1\xa4\x51\x60\xca\x9c\xed\xf9\x8a\x77\x81\xa1\xf7\x56\xf2\xe2\xe9\xe3\x9c\xca\xcc\x73\xeb\xbb\xdb\x86\x95\x39\x86\xb6\x09\x1e\xf9\xd3\x3a\x4e\xd9\x2b\x99\xb1\x82\x09\x4b\x39\xaf\xba\x37\x32\xd9\x53\x92\xf3\x98\x34\xe5\x3d\x12\x12\x18\xd5\x97\xf0\x3b\x43\xeb\xdc\xa3\xb5\xb5\xbb\x94\xbf\x4f\xae\x13\xd6\x47\xbb\x2b\xe2\x73\x4e\x91\x57\x24\xf0\xd2\xa1\x26\xde\x38\xbd\x83\xb2\xf7\x35\x5e\xdb\x57\x4a\xd9\x04\xa6\x7a\xf2\x1e\x72\x0f\x18\xdb\x0e\xbe\x52\x85\xc3\x77\xef\xe5\x0f\x2d\x58\x1d\xdd\x84\xc0\xac\x0d\x94\xad\x1a\xc6\xdd\xcd\xbc\x71\x66\x27\xa7\x7d\x9d\x4c\xd9\xd7\xe4\xb8\xa9\xbd\xe0\xb4\x19\x74\x6d\xc4\x68\x59\x31\x56\xfd\x7b\xf7\x22\x1b\xb0\xf4\x97\x77\x30\x90\x7d\xf3\xcc\xfe\x42\x5e\xf9\xe4\x19\x5e\xf7\xeb\x98\x74\x3e\xc9\x59\x2b\xf8\xc7\x1e\xd0\x50\x8f\xa1\x65\x42\x2e\x5e\x0b\x2a\xd4\x86\xe6\xb8\x04\x39\x63\x53\x33\x65\x2b\xe7\x9f\xfd\x02\x6f\x5a\x41\xa9\x0e\xae\x02\xa0\x78\x11\x11\xc2\x50\x13\xaa\x2f\xe8\x10\xfc\x7b\x00\xbc\xdd\x0f\x7e\x50\x8f\x43\x22\x50\xb4\x18\x56\xd1\xb9\x56\x94\x4e\x68\x31\xd8\x5d\x07\xa3\xf8\x1f\xf7\x92\xc0\x2d\xc3\x1e\xce\x14\x05\x53\x31\xd5\xdc\x74\x4c\x35\x91\x08\xa8\x8e\x44\x8c\xe2\xfe\x88\x51\xd4\x85\x20\xf6\x5d\x46\x91\x8d\x46\x11\x42\xa0\x08\x88\xdd\x03\xdc\x5a\x05\xfc\xf5\x34\x70\xc7\x00\xfc\x13\x00\x00\xff\xff\x45\x44\x84\x4f\x7e\x04\x00\x00")

func blogTemplateFaviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_blogTemplateFaviconIco,
		"blog/template/favicon.ico",
	)
}

func blogTemplateFaviconIco() (*asset, error) {
	bytes, err := blogTemplateFaviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "blog/template/favicon.ico", size: 1150, mode: os.FileMode(436), modTime: time.Unix(1521964427, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _blogTemplateLayoutHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\xca\x48\x4d\x4c\x49\x2d\x52\x52\xd0\xab\xad\xe5\xb2\xc9\x30\xb4\xab\xae\xd6\x2b\xc9\x2c\xc9\x49\xad\xad\xb5\xd1\xcf\x30\xb4\xe3\xaa\xae\xd6\x4b\xca\x4f\xa9\xac\xad\xe5\x42\xd6\x95\x96\x9f\x5f\x02\xd5\x05\x08\x00\x00\xff\xff\xd3\x36\x34\x46\x4d\x00\x00\x00")

func blogTemplateLayoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_blogTemplateLayoutHtml,
		"blog/template/layout.html",
	)
}

func blogTemplateLayoutHtml() (*asset, error) {
	bytes, err := blogTemplateLayoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "blog/template/layout.html", size: 77, mode: os.FileMode(436), modTime: time.Unix(1522273528, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _blogTemplateMainCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x58\x5b\x6f\xeb\xb8\x11\x7e\xf7\xaf\x98\x3a\x58\xe0\xe4\x40\xd2\xca\x8e\x7d\x92\x55\x80\xa0\x8b\x3e\xb4\x2f\x2d\x8a\x76\x1f\xf7\x85\x16\x69\x8b\x38\x14\xa9\x52\xf4\xed\x2c\xfc\xdf\x0b\x5e\x45\xca\xb2\x93\xac\x03\x24\x31\xe7\xa2\xe1\x70\xe6\x9b\x8f\xaa\xa4\x10\x0a\xfe\x98\x01\x00\xe4\x79\x27\x69\x8b\xe4\x39\xaf\x05\x13\xb2\x82\x07\x54\xaf\x16\xab\xe5\xeb\x48\xba\x41\xf5\xf7\x9d\x14\x7b\x8e\x2b\x38\x36\x54\x11\xaf\xc0\xe8\xae\x51\x44\x7a\x45\xed\x60\xbb\x5e\xae\x57\x5e\xae\xc8\x49\x05\xdf\x4f\xe6\x33\x98\xf2\xef\x41\xb4\x5a\xbe\x6c\x6a\xe4\x45\x98\xf6\x68\xc3\x08\xf6\xe2\x9d\x44\x67\x2f\xeb\x89\xa4\xdb\x7c\x2b\xb8\xaa\x60\xfe\xef\xdf\xe0\xbf\xfa\xfb\x3c\x83\xbf\x13\x21\x77\x14\x65\x30\xff\x8d\xb6\xa4\x87\x7f\x91\x23\xfc\x47\xb4\x88\xcf\x33\x30\x36\xc1\x01\xe2\x7d\x6c\x8f\x78\x3f\xcf\xe0\x1f\x84\x1d\x88\xa2\x35\xca\xe0\x57\x49\x11\xcb\xc0\xe8\x25\x96\xad\xe0\xc2\x59\xfe\x4d\xf0\x5e\x30\xd4\x67\x30\xff\x95\x63\xc4\x08\xfc\x53\x70\x31\xcf\xf4\x1f\x54\x8b\x0c\xb4\x6e\xdf\xa1\x9a\x24\xc6\x3d\xfd\x41\x2a\x78\x29\x7f\xf2\xab\x1b\x21\x31\x91\x15\x2c\xba\x13\xf4\x82\x51\x0c\x0f\xd8\x7c\x52\x85\x5c\x22\x4c\xf7\x7d\x55\xfa\xe5\x5a\x60\x92\x9c\xca\xc3\xf6\x45\xff\x84\x4d\x52\x4c\x36\x48\x8e\x54\xb6\xdb\x2d\x19\x02\x42\x27\x7b\x3c\x47\x8a\x55\x53\xc1\x7a\x2d\x49\xfb\x3a\xbb\xcc\xbe\xba\xe2\x68\x91\xdc\x51\x5e\x81\x7b\x68\x87\x30\xa6\x7c\x17\xbe\x9b\x3a\xc8\xcd\x1e\x2b\xa0\xbc\x21\x92\x2a\x2b\xd9\x88\x93\xde\xa9\x51\x76\xf1\x6f\xc4\x49\xbb\xde\x08\x7c\x76\xde\x75\x1e\x5d\x3e\x96\x65\x77\xb2\x96\xee\xbc\x0f\x48\x7e\x89\x6b\xe7\xd1\xf9\x0d\x9b\xc9\x13\xc5\xeb\x2a\x75\x06\xe6\x19\x5b\xd4\x52\x76\xf6\xba\x43\xf9\x3c\xea\x80\x9a\x45\x06\xcd\x32\x83\xe6\x29\x83\x66\x95\x41\xb3\xce\xa0\xf9\x16\x87\x78\x24\xba\xc4\x2b\x58\x97\x6e\xdf\x3e\x2d\x8b\xb2\x3b\xf9\x5c\x4c\x86\x13\x87\x3e\x15\x89\xaf\x43\x17\x08\xfc\x91\xe4\xa4\x58\xea\xe3\x80\xcb\xac\x59\xa6\x92\x45\xb1\xf6\x92\xa7\xb1\x24\xd8\xac\xc6\x92\x85\x97\xac\xc7\x92\xd2\x4b\xbe\xa5\x92\xb2\xf8\x25\x44\x70\x23\x41\x36\x15\xb9\x12\x5d\x70\x14\xaf\x6f\x84\x52\xa2\xd5\x9e\x96\xae\xb4\xf4\x5e\x26\x2c\xd7\xc1\x32\x94\x8b\xb5\xb4\x99\xb2\x8b\x26\x4d\xb4\xdd\x05\x0f\x27\x5f\xb9\x8b\x52\x37\xd4\x65\xa6\x34\x68\x38\xb1\x73\x54\x0b\xc6\x50\xd7\x93\x0a\xfc\x7f\xf6\x39\x46\x35\x67\xe8\x2c\xf6\xaa\x82\x2d\x3d\x11\xd7\x71\x63\x97\x38\x03\xd5\x38\x9f\xa6\x20\x11\xa3\x3b\x5e\x01\x23\x5b\x57\xed\x07\x22\x35\x6e\x30\x2f\x51\xa2\x0b\xc1\x14\x36\x0c\x82\xe1\x0d\x94\x29\xfe\x37\x50\x52\xff\x6a\xb2\xf7\x34\x70\xb2\x93\x89\x5c\xa0\x0c\x50\xd5\x88\x03\x91\x4e\x33\xa9\xc2\x01\x5e\xad\x72\xbc\x07\x4c\x6a\x21\x91\xa2\x82\x57\xc0\x05\x27\x46\x21\x71\x75\xa5\xb6\xe7\x98\x48\x46\xad\x6e\x97\x41\x27\x49\x06\x8c\x66\x80\x55\x06\x18\x67\xb0\x61\xa2\xfe\xfe\xbf\xbd\x50\x04\x3a\xe7\x44\xab\xe7\x8d\xeb\x9f\x45\xb1\x5a\xbf\x5e\x9d\x7d\x19\x9d\xfd\x55\xd5\x78\x40\xda\xb3\x0c\x04\x73\x4e\xc7\x30\x14\x50\x0a\x4a\xdb\x92\xcb\x75\x67\xb0\x06\xab\xb4\xd6\x82\xdf\xa8\x23\x7b\x75\x66\x1a\xbd\x14\x62\xb4\x36\x46\x38\x35\xd2\xc7\x3c\x59\xdb\x36\x7a\x83\x69\xc3\xc6\xc7\x11\xda\xa0\xd6\x1e\xdd\xfc\x49\xda\x94\x47\x55\x6a\x9f\xb2\x1e\x66\x00\x31\x9f\xa4\x22\xc3\xd0\x08\xf8\x53\xac\x49\x3b\x02\xa0\x87\xa7\x17\xfd\xa3\xc3\x2a\x6a\x1a\x22\xf2\xd2\xe7\xe7\xe7\x11\x96\xaf\x2d\x86\x39\xf5\xaa\xda\x90\xad\x90\x83\x19\x57\xc4\xcc\xc9\xdf\x97\xe5\x62\x05\xbf\x2f\xcb\xf2\x97\xb9\xd6\xd6\xe3\x27\x06\xc9\x14\xd9\xc2\x9c\x7c\x07\xb7\x47\x43\xcc\xd4\x69\x27\x3f\xe1\x38\x42\xab\x48\x41\x2f\x38\x85\x9f\xbf\xa6\x45\xc8\x85\x6c\x11\x7b\x85\xaf\x3f\x5f\x8f\xb0\x4e\x92\xfc\x28\x51\xf7\xd9\x98\xef\xf4\x68\x74\xc4\x6e\x80\x27\x1a\x6e\xf1\x71\x74\x26\xdf\x6c\xfd\x16\x86\x5b\x45\xcf\xf2\x78\xf0\xa7\x22\x1b\x6a\x6e\xbc\x69\x33\xf2\x2b\x2e\xd4\x97\x4e\x92\x47\x78\x83\xe8\x70\x13\x5d\x2e\x6c\x7a\x2e\xb3\x02\xb3\xbc\x11\x92\xfe\x10\x5c\x21\x06\x6f\x30\x6e\x9b\x64\x22\xd8\x43\x4d\xfc\x5e\xef\x21\x21\x10\x71\x8f\x5b\xeb\xbe\x43\xdc\xd9\x8a\x0e\xd5\x54\x9d\x2b\x58\xc0\x5f\x68\xdb\x09\xa9\x10\x57\x26\xaa\x03\x91\x3d\x19\x91\x17\xdb\x25\x96\x61\x5c\x66\x98\x1e\x9c\x96\x86\xb0\xc4\x20\x29\xb7\x40\x26\x0d\x97\x4c\x08\xe4\x9d\x9a\x49\x81\xed\xf9\x0e\xb2\x3d\x7b\x68\x2b\x1c\x51\xbb\x8f\xf5\x9f\xaa\xa3\x98\xf2\x39\xa6\x71\x45\x06\xc7\x25\xb7\x08\x0c\xec\x0a\x5d\x6c\xd2\x7c\x98\x5f\xab\x2d\x95\xbd\xca\xeb\x86\xb2\xa9\x33\x1f\x46\x7d\xd1\xa1\x1d\xc9\x37\x92\xa0\xef\x01\x17\xfd\x42\x6e\x61\xa6\x02\xc4\x8e\xe8\xdc\x1b\x75\x2e\xf2\x7b\x16\x94\xeb\x10\x2a\x40\x07\x41\xb1\x31\x30\xe3\xd6\x40\xe7\xcd\xf1\x1c\xb4\x6a\xc2\x55\x3a\xdb\x9c\x9e\x15\x44\x9a\x52\x37\xdd\x84\xa2\x59\xb7\xfb\x92\xa4\x27\xf2\xe0\x02\xeb\xa7\x3a\xc5\x75\x55\x61\xb0\xe7\xae\x5a\x3e\xdd\x52\x0e\x87\x33\x18\x2d\xa3\xed\xb0\x0d\x4c\xfb\x8e\xa1\x73\x65\xb9\xcc\xeb\x08\xb1\xe7\xaf\xd7\x23\xb8\x9c\x78\x50\xec\xb1\x66\x04\x49\x4d\xd9\x55\x33\xdd\xe5\x3e\x31\x5b\x26\x90\x8a\x39\x90\xb3\x1c\x16\x34\x95\xd8\x32\x71\xac\xa0\xa1\x18\x13\xfe\x3a\x24\x74\x10\x11\xc6\x68\xd7\xd3\x7e\xa2\xb1\x3c\xd6\xdc\xa6\x5d\xb7\xb8\xa7\x1b\x97\xcb\xf5\x4f\x1f\x42\x2a\x3b\x7a\x8d\x76\xd4\x11\xa3\xb9\x7f\x99\x61\x16\x66\xe2\x5e\x57\x4c\xae\x8b\x40\x55\x80\x59\xee\x56\x9c\x56\x94\x25\xaf\x4a\x79\x2d\x49\x6b\x8e\x25\x55\x17\x37\x9c\x8a\xb1\xd6\x1b\x30\x7a\xdb\x69\xaa\xbe\xbf\xe1\x74\x3f\xd6\xba\xef\x34\x55\x2f\x86\xc0\x6f\x50\x04\x27\xfd\x32\x28\x3e\xc2\x1c\x0c\x59\x28\xc4\x47\x8d\xc5\x84\xf1\xfe\xa3\xc6\xfb\x09\x63\xcc\x72\xbe\x6f\x37\x8e\x5f\x63\xf5\x99\xe0\x0b\xeb\xe3\xaf\x2d\xc1\x14\x41\x27\x29\xf7\x07\x6b\xb0\x4a\x7f\xcf\x86\x7f\xc1\xdf\x9a\x93\xd6\xd4\x53\x37\x99\x52\x5a\x7a\x31\xbf\x53\xbe\x7d\x93\x9a\x4f\x58\x5f\x66\x0f\x2d\xa2\x7e\x1c\xfe\xc8\x29\xc7\xe4\x54\xc1\xc2\xf5\x05\xe5\x03\xe7\x2e\x07\xd2\x18\x6e\x4b\x8e\x29\x25\xb7\xff\xc7\xd7\xeb\x9e\x28\xa7\x3a\x62\x15\x06\x85\x5f\x97\xf6\x51\x2b\x37\x61\x1f\x90\xbe\x0d\xb1\x11\x17\x76\x6d\x6a\x55\x66\x45\x4b\xf8\xfe\x36\xcb\x8b\x2f\xc6\x16\xc3\x7a\xc7\xd4\x73\x75\xee\x48\xcc\x65\xde\x79\x45\x31\x8d\x42\xef\xbd\x46\x18\x2e\x4d\x36\xd0\xd0\x26\x57\xb0\x37\x9a\x7c\x77\x06\xfe\x32\x0c\x7c\xe7\xf2\xf6\x1c\xf5\x88\xe4\x58\xa0\x0f\x01\x8d\x61\xdf\xdc\x3b\xee\xbc\x7e\xb8\x9a\xf6\x53\x73\x2f\xcd\x5a\x77\x8a\x6e\x2b\x37\x6f\x8a\x43\x48\x49\x09\xdf\x4a\xeb\xe8\x15\xe1\xa3\x2d\x81\x0d\xe2\x3c\x98\x7e\xa0\x08\x46\x19\x5d\x8e\xca\xd0\xde\x64\x86\xea\x8c\xdf\xa4\xac\x5c\x26\xdd\x23\xd1\xd4\x6d\xf9\xfa\xec\x67\x05\x16\x75\xaf\x6b\x0f\xc2\x5b\x0b\x4f\xcf\xdc\x20\x8d\xe4\x9f\x72\xba\x15\x62\x18\xba\x8e\xc2\x99\x1a\x9a\xa0\x7d\x61\x7f\x4f\x6e\x17\x91\x83\x0f\x3f\x54\xa1\x9d\x8d\x14\x55\x07\xda\x53\x45\xf0\x87\xc3\x75\x6f\x62\xa7\xf4\xd3\xb7\xb4\xb6\x61\x0c\x11\xb8\x41\x27\x22\xaa\x96\x74\xd2\x65\x56\xc4\xac\xcb\xc9\x06\xc2\x15\x4a\xe1\x63\xd5\x72\x99\x79\xcc\xee\x6b\x49\x08\x07\xc4\x31\x7c\xd1\xb0\xe8\xdf\xed\x74\xa7\x47\xb7\x38\xa0\xe2\x4b\x59\xea\x65\x7f\x26\xe1\x35\xe5\xb8\x98\x42\x85\x59\x14\x8f\x91\x78\x82\x3f\x04\xed\x09\xc4\x5c\x8c\x5c\xc5\x03\xc4\x03\x97\xa1\x87\x15\x58\x0a\x7c\x14\x12\xc7\x06\x77\xa0\xe4\x16\x98\x3b\xc3\xa4\xf9\xee\x85\x7d\x99\x1e\x80\xf1\xae\xa7\x1f\x73\xf9\x7f\x00\x00\x00\xff\xff\x0f\x81\x02\x53\x66\x18\x00\x00")

func blogTemplateMainCssBytes() ([]byte, error) {
	return bindataRead(
		_blogTemplateMainCss,
		"blog/template/main.css",
	)
}

func blogTemplateMainCss() (*asset, error) {
	bytes, err := blogTemplateMainCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "blog/template/main.css", size: 6246, mode: os.FileMode(436), modTime: time.Unix(1522272334, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _blogTemplateNewslettersConfigToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x2e\x48\x4c\xcf\xcc\x4b\x2c\x49\x55\xb0\x55\xd0\x35\xe4\x02\x04\x00\x00\xff\xff\x88\x7a\xa2\x9d\x0f\x00\x00\x00")

func blogTemplateNewslettersConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_blogTemplateNewslettersConfigToml,
		"blog/template/newsletters/config.toml",
	)
}

func blogTemplateNewslettersConfigToml() (*asset, error) {
	bytes, err := blogTemplateNewslettersConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "blog/template/newsletters/config.toml", size: 15, mode: os.FileMode(436), modTime: time.Unix(1522196721, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _blogTemplateNewslettersDocsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x41\x8e\xc3\x20\x0c\x45\xf7\x39\x05\x62\x3d\x22\x6a\xd7\x94\x23\xcc\x1d\x3c\x89\x13\x22\xb9\x10\x81\xd1\x2c\x2c\xdf\x7d\x44\x54\x25\x9d\xb2\x41\x7a\xef\xa3\x6f\x2c\xc2\xf8\xdc\x09\x18\x8d\x8d\x08\x33\x16\x6b\x9c\xea\xe0\xe3\x2d\x7c\xe3\x6f\x25\x64\xc6\x52\xfd\x18\x6f\x61\xf0\x7b\x30\x22\x6e\xca\x2d\xb1\xaa\x49\x97\xff\x32\x3b\xac\xd8\x65\xbf\x5d\x6a\xcf\x1f\x2c\xaa\x26\x2f\x27\x23\xa8\x7c\x0a\x3f\xee\x61\xf0\x8d\xcc\x44\x50\xeb\xc3\xce\x79\xaa\xb4\x55\xb6\x61\x30\xaf\x23\x52\x20\xad\x68\x5c\x77\xaa\x27\xf7\xb4\x5d\xa1\x03\xc4\x7b\xf0\x60\x62\xc1\xe5\x61\x45\x5c\x2b\xa4\x6a\x83\x88\xe3\x8d\x09\x7b\x19\x04\x3f\xc6\xfb\xc7\xb3\xba\x43\xea\x29\xca\x69\x9d\x81\x8f\xe0\xc1\xae\xaa\xf1\xbd\x4b\x04\xd3\xfc\x1a\xc4\x8f\x8d\xc2\xf0\xbe\xbc\x3e\xe5\x92\x33\x1f\x0b\xec\x1f\x56\xfd\xe7\x4f\xa7\xfa\x17\x00\x00\xff\xff\x7c\xc1\x6c\x05\x74\x01\x00\x00")

func blogTemplateNewslettersDocsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_blogTemplateNewslettersDocsHtml,
		"blog/template/newsletters/docs.html",
	)
}

func blogTemplateNewslettersDocsHtml() (*asset, error) {
	bytes, err := blogTemplateNewslettersDocsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "blog/template/newsletters/docs.html", size: 372, mode: os.FileMode(436), modTime: time.Unix(1522196812, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _blogTemplateNewslettersLayoutHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\xca\x48\x4d\x4c\x49\x2d\x52\x52\xd0\xab\xad\xe5\xb2\xc9\x30\xb4\xab\xae\xd6\xcb\xc9\xcf\x4b\x4f\x49\x2c\x49\xad\xad\x55\xf0\x4b\x2d\x2f\xce\x49\x2d\x29\x49\x2d\xb2\xd1\xcf\x30\xb4\xe3\xaa\xae\xd6\x4b\xca\x4f\xa9\xac\xad\xe5\x42\x36\x23\x25\x3f\x39\x2d\x3f\xbf\x04\x66\x0c\xb2\x14\x92\x38\x20\x00\x00\xff\xff\x20\x12\xa0\x98\x76\x00\x00\x00")

func blogTemplateNewslettersLayoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_blogTemplateNewslettersLayoutHtml,
		"blog/template/newsletters/layout.html",
	)
}

func blogTemplateNewslettersLayoutHtml() (*asset, error) {
	bytes, err := blogTemplateNewslettersLayoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "blog/template/newsletters/layout.html", size: 118, mode: os.FileMode(436), modTime: time.Unix(1522218557, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _blogTemplatePartialsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x52\x3d\x6e\xdb\x30\x14\xde\x79\x0a\x96\x43\xb7\x48\xe8\x5c\x8a\x40\xd1\x9f\xa9\x48\x32\x64\xe9\x48\x8b\x4f\x16\x51\x9a\x12\xc8\x27\xd9\x81\xa0\xa9\xc7\xc9\x11\xbc\xf9\x2a\xbd\x48\x41\x91\xb6\xe4\x24\x4d\x1b\x0f\xed\x62\x49\xa4\xdf\xf7\xf3\xbe\x6f\x18\x14\x54\xda\x02\x65\x35\x48\x05\x8e\x8d\x23\xe1\x6f\x3e\xdd\x7c\xbc\xfb\x76\xfb\x99\xd6\xb8\x31\x82\xf0\xe3\x03\xa4\x12\x84\xa3\x46\x03\x62\x18\xb2\xe9\x65\x1c\x79\x1e\x4f\x08\xdf\x00\x4a\x6a\xe5\x06\x0a\xd6\x6b\xd8\xb6\x8d\x43\x46\xcb\xc6\x22\x58\x2c\xd8\x56\x2b\xac\x0b\x05\xbd\x2e\xe1\x6a\xfa\x60\xb9\x20\xdc\x68\xfb\x9d\xe2\x7d\x0b\x05\x43\xd8\x61\x5e\x7a\xcf\xa8\x03\x53\x30\x8f\xf7\x06\x7c\x0d\x80\x8c\xd6\x0e\xaa\x82\x0d\x43\xe6\x35\x42\xd6\x39\xd3\x3a\xa8\xf4\x6e\x1c\xf3\x8d\xd4\x36\x0b\x43\x82\xf0\x3c\x49\x5c\x35\xea\x5e\x10\xae\x74\x4f\x4b\x23\xbd\x2f\xd8\x4a\x5a\x0b\x8e\xda\xe6\xaa\x75\xda\x22\x13\x84\x52\x2e\x5f\x80\xd5\x56\xc1\x2e\x0b\xce\x59\xf0\xda\x79\x70\x59\x04\x09\x8e\x65\x20\x53\xba\x17\x84\x77\xe6\xc8\xb1\x01\xdb\x3d\x62\x30\x5a\xfc\x99\x05\x7c\xde\x36\x1e\x7d\xae\x9a\xd2\x5f\xbd\x4b\xa4\xb7\xe1\x28\x30\xf1\xdc\xe8\x0b\xc0\x50\xae\x7d\x82\xba\x93\xeb\xcb\x90\x2c\x6c\xbd\x01\x44\x70\x8f\xc4\x5d\xc3\xf6\x75\x88\x72\xd5\x74\x98\x86\x3f\x84\xf7\x79\x9a\xe7\x9d\x49\x61\x69\x55\xb0\x90\xe7\xb4\x3c\x4a\x4f\x67\xd2\xa1\x2e\x0d\x30\x41\x86\x01\xac\x1a\x47\x42\xe6\xe2\x56\x4d\x83\xb1\xb8\xd3\x4c\x8a\xe5\xf8\x48\x55\xc8\x63\x87\x9f\x19\x57\x4d\x19\x56\x35\x15\xdf\xb7\xd2\x1e\xd3\x3c\x9e\x47\x29\xc3\xe0\xa4\x5d\x03\xcd\x12\xcd\xcf\x1f\xfb\xb3\xfe\x74\xce\x8c\xe3\xd4\x14\x94\xeb\xd4\x90\x38\x17\x09\x79\x1e\xb0\x7f\x27\x60\xb6\xb0\xec\x6c\xd8\x78\xba\x49\xfb\x58\xea\x33\x50\x61\x3a\x8f\x44\xba\xa2\x59\xeb\xa0\x8f\x5a\x4e\x17\x87\x87\x33\xa1\xf3\x3f\x98\xb8\x75\xd0\xeb\xa6\xf3\x27\xb5\x49\xb1\xf1\xb0\x00\x38\xdf\x8a\xf6\x72\x65\x40\x31\x71\x78\xa0\xf3\x7c\x34\xb7\x80\x98\x4c\xc6\x3c\xe6\xbb\x33\x24\xa7\xd7\xf5\x53\x03\x16\x76\xf8\xc8\xc0\x52\xfd\x7c\x1d\x3a\xb8\x9b\x5a\x44\x0f\xfb\x57\x8b\x0f\xb3\xf4\xb0\xff\x1b\xe1\xa9\x49\xcf\x07\xe7\xff\x61\x72\x95\x76\xfe\x64\xfe\x4b\xf8\x98\xdc\xbf\xb5\x2b\xdf\xbe\x8f\xbf\x2f\x85\x7d\x0d\x5b\x70\x97\x26\x3d\xd1\x3d\xa1\x4a\x90\xff\x23\xfc\x1b\xa3\xa2\x1b\x7a\xd8\x9f\xeb\x5a\x4e\x18\x39\x6f\xec\xab\xf4\x17\xd7\x65\x62\x7b\xc2\x14\x10\x2f\x2a\xd1\xaf\x00\x00\x00\xff\xff\x44\x59\x63\x66\x75\x07\x00\x00")

func blogTemplatePartialsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_blogTemplatePartialsHtml,
		"blog/template/partials.html",
	)
}

func blogTemplatePartialsHtml() (*asset, error) {
	bytes, err := blogTemplatePartialsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "blog/template/partials.html", size: 1909, mode: os.FileMode(436), modTime: time.Unix(1522287684, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _blogTemplatePostsDocsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x41\x6e\xc4\x20\x0c\x45\xf7\x39\x85\xc5\xba\x22\x9a\x59\x33\x2c\x7a\x82\x5e\xc1\x4d\x08\x44\xf2\x00\x0a\xce\xca\xf2\xdd\x2b\xa8\x1a\x4d\x67\x85\x78\xcf\x16\x9f\x2f\xc2\xe1\x59\x09\x39\x80\x49\x01\xd7\x70\x18\xb0\xaa\x93\x4b\x37\x2f\x62\x19\xa3\x2a\x7c\x52\x89\xf0\x55\x1a\x37\x37\xa7\x9b\x9f\x5c\xf5\x20\x62\x97\x72\x66\x56\x85\xda\xcd\x07\x54\x8c\xa1\xe3\x7e\xda\x7c\x3e\xbf\xc3\xa1\x0a\x65\xbb\x18\x61\xe3\x4b\xb8\xb9\xfa\xc9\x9d\x04\x0b\x61\x6b\x0f\xb3\x96\xa5\xd1\xde\xd8\xf8\x09\x00\x40\xe4\xc0\x1c\x03\xd8\xce\x55\x07\x73\xb4\xff\xca\x71\x49\x77\xef\x10\xd2\x11\xb6\x87\x11\xb1\xe7\x41\xaa\x66\x64\xde\x99\x42\x7f\x00\xbd\x9b\xd3\xfd\x65\xa5\x55\xcc\x7d\x82\x4a\x8e\x2b\xf2\x18\x1a\xec\x1a\x79\xad\x63\x2d\x0b\x63\x6c\x06\x7a\x0b\x57\x86\xf9\x2f\x84\x48\xc8\x6b\x6f\x6a\x3e\xc9\x4f\x6f\x8b\x6d\x2b\x85\x47\x97\xfd\xe7\xaa\xff\xfc\xe5\x54\x7f\x02\x00\x00\xff\xff\xcf\x4b\xa3\x2c\x7f\x01\x00\x00")

func blogTemplatePostsDocsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_blogTemplatePostsDocsHtml,
		"blog/template/posts/docs.html",
	)
}

func blogTemplatePostsDocsHtml() (*asset, error) {
	bytes, err := blogTemplatePostsDocsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "blog/template/posts/docs.html", size: 383, mode: os.FileMode(436), modTime: time.Unix(1522187127, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _blogTemplatePostsLayoutHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\x41\x8a\x85\x30\x0c\x40\xf7\x3d\x45\xe9\xde\x8a\xdb\x99\xda\xbb\x44\x1b\xb5\xd0\x36\x62\x82\x20\xa5\x77\x1f\x3a\xf0\x41\xfe\x2a\x90\x3c\x5e\x5e\xad\x82\xf9\x4c\x20\xa8\xcd\x81\x10\xf0\x32\xda\xb6\xa6\xdc\x31\xf9\x5a\xad\x44\x49\xd8\x9a\x1b\x8f\xc9\x2b\x17\xe2\xad\x59\x9e\x84\xb3\xc9\x70\xed\xb1\x0c\x0b\x89\x50\xfe\xd1\xd3\x85\xf9\xd7\x78\xe5\xf8\x84\xa2\xd7\x04\xcc\xb3\x61\x28\x3c\x6c\x54\xc4\x74\x55\xa2\xb2\x07\x90\x7f\x5b\xa7\xbc\x7e\xff\x0e\xb4\x0a\xec\x6c\xb4\xed\xa3\x07\x8c\x21\xde\x5e\xd5\x6a\x17\x0a\x4f\x6b\xea\x8b\xde\x88\xe4\x13\xfb\x3e\xbd\xf6\x7f\x01\x00\x00\xff\xff\xd9\x42\xf0\x11\xdc\x00\x00\x00")

func blogTemplatePostsLayoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_blogTemplatePostsLayoutHtml,
		"blog/template/posts/layout.html",
	)
}

func blogTemplatePostsLayoutHtml() (*asset, error) {
	bytes, err := blogTemplatePostsLayoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "blog/template/posts/layout.html", size: 220, mode: os.FileMode(436), modTime: time.Unix(1522221435, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _blogTemplatePostsTagsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\x31\xca\xc3\x30\x0c\x46\x77\x9f\x42\x78\xfa\xff\xc5\x21\xbb\xe3\x53\xf4\x02\x22\x51\xe2\x82\xeb\x04\x4b\x99\x84\xa6\x1e\xab\xc7\xe9\x45\x8a\x4b\x0b\x5d\x1f\x1f\xdf\x7b\xaa\x42\xb7\xa3\xa0\x10\xf8\x4c\xb8\x50\xf3\x10\xcc\x5c\xcc\x63\xba\xe0\xc6\x71\xc8\x63\x72\x91\x0f\xac\x30\x17\x64\x9e\xbc\xe0\xc6\xe5\xca\xe2\x93\x03\x00\x50\x6d\x58\x37\x82\xd0\xb9\xd9\x9b\x3d\xef\x0f\x88\x08\xb9\xd1\x3a\x79\xd5\x70\xb6\x62\xe6\x93\x6a\x1f\x99\xc1\x9f\x6a\x98\xf7\xb3\x8a\xd9\x7f\x1c\xf0\x7b\x44\x75\xe9\xea\xa1\xdb\x92\xfb\x4d\x5b\xf7\x5d\x3e\x69\xaf\x00\x00\x00\xff\xff\x60\xdb\xe3\xf4\xb2\x00\x00\x00")

func blogTemplatePostsTagsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_blogTemplatePostsTagsHtml,
		"blog/template/posts/tags.html",
	)
}

func blogTemplatePostsTagsHtml() (*asset, error) {
	bytes, err := blogTemplatePostsTagsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "blog/template/posts/tags.html", size: 178, mode: os.FileMode(436), modTime: time.Unix(1522197226, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _minimalTemplateIndexMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xf2\x48\xcd\xc9\xc9\x57\xd0\x0a\xcf\x2f\xca\x49\xd1\x52\xe4\x02\x04\x00\x00\xff\xff\xac\xd1\x81\x2d\x0f\x00\x00\x00")

func minimalTemplateIndexMdBytes() ([]byte, error) {
	return bindataRead(
		_minimalTemplateIndexMd,
		"minimal/template/index.md",
	)
}

func minimalTemplateIndexMd() (*asset, error) {
	bytes, err := minimalTemplateIndexMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "minimal/template/index.md", size: 15, mode: os.FileMode(436), modTime: time.Unix(1522006558, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _minimalTemplateLayoutHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x51\x4c\xc9\x4f\x2e\xa9\x2c\x48\x55\xc8\x28\xc9\xcd\xb1\xe3\xb2\xc9\x48\x4d\x4c\xb1\xb3\x29\xc9\x2c\xc9\x49\xb5\xab\xae\xd6\x03\x33\x6a\x6b\x6d\xf4\x21\x22\x36\xfa\x60\x79\x2e\x9b\xa4\xfc\x94\x4a\x90\x3c\x88\x06\x49\x83\xf9\x5c\x80\x00\x00\x00\xff\xff\xf7\x95\xf9\xaa\x4e\x00\x00\x00")

func minimalTemplateLayoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_minimalTemplateLayoutHtml,
		"minimal/template/layout.html",
	)
}

func minimalTemplateLayoutHtml() (*asset, error) {
	bytes, err := minimalTemplateLayoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "minimal/template/layout.html", size: 78, mode: os.FileMode(436), modTime: time.Unix(1520106920, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"blog/template/config.toml": blogTemplateConfigToml,
	"blog/template/favicon.ico": blogTemplateFaviconIco,
	"blog/template/layout.html": blogTemplateLayoutHtml,
	"blog/template/main.css": blogTemplateMainCss,
	"blog/template/newsletters/config.toml": blogTemplateNewslettersConfigToml,
	"blog/template/newsletters/docs.html": blogTemplateNewslettersDocsHtml,
	"blog/template/newsletters/layout.html": blogTemplateNewslettersLayoutHtml,
	"blog/template/partials.html": blogTemplatePartialsHtml,
	"blog/template/posts/docs.html": blogTemplatePostsDocsHtml,
	"blog/template/posts/layout.html": blogTemplatePostsLayoutHtml,
	"blog/template/posts/tags.html": blogTemplatePostsTagsHtml,
	"minimal/template/index.md": minimalTemplateIndexMd,
	"minimal/template/layout.html": minimalTemplateLayoutHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"blog": &bintree{nil, map[string]*bintree{
		"template": &bintree{nil, map[string]*bintree{
			"config.toml": &bintree{blogTemplateConfigToml, map[string]*bintree{}},
			"favicon.ico": &bintree{blogTemplateFaviconIco, map[string]*bintree{}},
			"layout.html": &bintree{blogTemplateLayoutHtml, map[string]*bintree{}},
			"main.css": &bintree{blogTemplateMainCss, map[string]*bintree{}},
			"newsletters": &bintree{nil, map[string]*bintree{
				"config.toml": &bintree{blogTemplateNewslettersConfigToml, map[string]*bintree{}},
				"docs.html": &bintree{blogTemplateNewslettersDocsHtml, map[string]*bintree{}},
				"layout.html": &bintree{blogTemplateNewslettersLayoutHtml, map[string]*bintree{}},
			}},
			"partials.html": &bintree{blogTemplatePartialsHtml, map[string]*bintree{}},
			"posts": &bintree{nil, map[string]*bintree{
				"docs.html": &bintree{blogTemplatePostsDocsHtml, map[string]*bintree{}},
				"layout.html": &bintree{blogTemplatePostsLayoutHtml, map[string]*bintree{}},
				"tags.html": &bintree{blogTemplatePostsTagsHtml, map[string]*bintree{}},
			}},
		}},
	}},
	"minimal": &bintree{nil, map[string]*bintree{
		"template": &bintree{nil, map[string]*bintree{
			"index.md": &bintree{minimalTemplateIndexMd, map[string]*bintree{}},
			"layout.html": &bintree{minimalTemplateLayoutHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

